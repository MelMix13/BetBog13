#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è BetBog
"""
import asyncio
import aiohttp
import os
from typing import Dict, Any
from datetime import datetime

class SimpleBetBogBot:
    """–ü—Ä–æ—Å—Ç–æ–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π Telegram –±–æ—Ç"""
    
    def __init__(self):
        self.bot_token = os.getenv("BOT_TOKEN", "7228733029:AAFVPzKHUSRidigzYSy_IANt8rWzjjPBDPA")
        self.running = False
        
    async def send_message(self, chat_id: int, text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            data = {"chat_id": chat_id, "text": text, "parse_mode": "HTML"}
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status}")
                        return False
                        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return False

    async def handle_command(self, chat_id: int, text: str, user_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"üì® –ö–æ–º–∞–Ω–¥–∞ –æ—Ç {user_name}: {text}")
        
        if text.startswith("/start"):
            response = """üèÜ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BetBog Monitoring Bot!</b>

ü§ñ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
üìä –ê–Ω–∞–ª–∏–∑ live –º–∞—Ç—á–µ–π —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
/signals - –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
/help - –ü–æ–º–æ—â—å

üî• –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç live —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏!"""
            
        elif text.startswith("/status"):
            response = """üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã BetBog</b>

üü¢ <b>–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç</b>
üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: 60+ live –º–∞—Ç—á–µ–π
‚ö° –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–µ—Ç—Ä–∏–∫
üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω: —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—é—Ç—Å—è
‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL –∞–∫—Ç–∏–≤–Ω–∞
‚úÖ –í—ã—á–∏—Å–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"""
            
        elif text.startswith("/info"):
            response = """‚öΩ <b>–û —Å–∏—Å—Ç–µ–º–µ BetBog</b>

üìä <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ –º–µ—Ç—Ä–∏–∫–∏:</b>
‚Ä¢ dxG (–ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –≥–æ–ª—ã)
‚Ä¢ Gradient (—Ç—Ä–µ–Ω–¥—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏) 
‚Ä¢ Wave amplitude (–∞–º–ø–ª–∏—Ç—É–¥–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏)
‚Ä¢ Momentum (–∏–º–ø—É–ª—å—Å –∫–æ–º–∞–Ω–¥)
‚Ä¢ Tiredness factor (—Ñ–∞–∫—Ç–æ—Ä —É—Å—Ç–∞–ª–æ—Å—Ç–∏)
‚Ä¢ Stability (—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥)

üéØ <b>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å—Ç–∞–≤–æ–∫:</b>
‚Ä¢ momentum_shift - —Å–º–µ–Ω–∞ –∏–º–ø—É–ª—å—Å–∞
‚Ä¢ tiredness_advantage - –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ —É—Å—Ç–∞–ª–æ—Å—Ç–∏
‚Ä¢ gradient_momentum - –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –∏–º–ø—É–ª—å—Å
‚Ä¢ stability_tracker - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

üß† <b>–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ:</b>
–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π"""
            
        elif text.startswith("/signals"):
            response = """üìä <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏</b>

üî• –°–∏—Å—Ç–µ–º–∞ BetBog –∞–∫—Ç–∏–≤–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç live –º–∞—Ç—á–∏
‚ö° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–µ—Ç—Ä–∏–∫

üéØ <b>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ —Ä–∞–±–æ—Ç–µ:</b>
‚Ä¢ momentum_shift - –∞–Ω–∞–ª–∏–∑ —Å–º–µ–Ω—ã –∏–º–ø—É–ª—å—Å–∞
‚Ä¢ tiredness_advantage - —Ñ–∞–∫—Ç–æ—Ä —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥  
‚Ä¢ gradient_momentum - –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ stability_tracker - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

üìä –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚ö° –£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –±–µ–∑ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π"""
            
        elif text.startswith("/help"):
            response = """‚ùì <b>–ü–æ–º–æ—â—å –ø–æ BetBog Bot</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã  
/info - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ç—Ä–∏–∫–∞—Ö
/signals - –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–û —Å–∏—Å—Ç–µ–º–µ:</b>
BetBog - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º –∏ –∞–Ω–∞–ª–∏–∑–æ–º live –¥–∞–Ω–Ω—ã—Ö.

–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."""
            
        else:
            response = f"""–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: <code>{text}</code>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
/signals - –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
/help - –ü–æ–º–æ—â—å"""
        
        await self.send_message(chat_id, response)

    async def handle_update(self, update: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            if "message" in update:
                message = update["message"]
                chat_id = message["chat"]["id"]
                text = message.get("text", "")
                user = message.get("from", {})
                user_name = user.get("first_name", "Unknown")
                
                await self.handle_command(chat_id, text, user_name)
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

    async def process_updates(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        last_update_id = 0
        
        while self.running:
            try:
                url = f"https://api.telegram.org/bot{self.bot_token}/getUpdates"
                params = {"offset": last_update_id + 1, "timeout": 30}
                
                async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=35)) as session:
                    async with session.get(url, params=params) as response:
                        if response.status == 200:
                            data = await response.json()
                            if data.get("ok"):
                                for update in data.get("result", []):
                                    await self.handle_update(update)
                                    last_update_id = max(last_update_id, update["update_id"])
                        else:
                            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {response.status}")
                        
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ polling: {str(e)}")
                await asyncio.sleep(5)

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.running = True
        print("üöÄ BetBog Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await self.process_updates()

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.running = False
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = SimpleBetBogBot()
    try:
        await bot.start()
    except KeyboardInterrupt:
        bot.stop()
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

if __name__ == "__main__":
    asyncio.run(main())