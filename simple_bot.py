import asyncio
from typing import Dict, Any
from config import Config
from logger import BetBogLogger

class SimpleBettingBot:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    def __init__(self, config: Config):
        self.config = config
        self.logger = BetBogLogger("SIMPLE_BOT")
        self.running = False
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
    async def send_signal_notification(self, 
                                     signal_data: Dict[str, Any],
                                     match_data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–µ (–∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥)"""
        self.logger.strategy_signal(
            signal_data.get('strategy_name', 'UNKNOWN'),
            signal_data.get('signal_type', 'BUY'),
            signal_data.get('confidence', 0.0),
            f"–ú–∞—Ç—á: {match_data.get('home_team', 'HOME')} vs {match_data.get('away_team', 'AWAY')}"
        )
        
        print(f"\nüö® –°–ò–ì–ù–ê–õ –°–¢–ê–í–ö–ò üö®")
        print(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: {signal_data.get('strategy_name')}")
        print(f"–¢–∏–ø: {signal_data.get('signal_type')}")
        print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal_data.get('confidence', 0):.1%}")
        print(f"–ú–∞—Ç—á: {match_data.get('home_team')} vs {match_data.get('away_team')}")
        print(f"–ú–∏–Ω—É—Ç–∞: {signal_data.get('minute', 0)}")
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {signal_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
        print("-" * 50)
        
    async def send_result_notification(self, 
                                     signal_data: Dict[str, Any],
                                     match_data: Dict[str, Any],
                                     result: str,
                                     profit_loss: float):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"""
        status_emoji = "‚úÖ" if result == "won" else "‚ùå" if result == "lost" else "‚è≥"
        
        self.logger.profit_loss_update(
            signal_data.get('strategy_name', 'UNKNOWN'),
            profit_loss,
            1,
            1.0 if result == "won" else 0.0
        )
        
        print(f"\n{status_emoji} –†–ï–ó–£–õ–¨–¢–ê–¢ –°–¢–ê–í–ö–ò {status_emoji}")
        print(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: {signal_data.get('strategy_name')}")
        print(f"–ú–∞—Ç—á: {match_data.get('home_team')} vs {match_data.get('away_team')}")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result.upper()}")
        print(f"–ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫: {profit_loss:+.2f}")
        print("-" * 50)
        
    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.running = True
        self.logger.success("–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–æ–≤ –∞–∫—Ç–∏–≤–µ–Ω")
        
    async def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.running = False
        self.logger.info("–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")