#!/usr/bin/env python3
"""
–†–µ–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è BetBog —Å –Ω–∞—Å—Ç–æ—è—â–∏–º Bot API
–†–∞–±–æ—Ç–∞–µ—Ç —Å python-telegram-bot –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π
"""

import asyncio
import os
from datetime import datetime
from typing import Dict, Any, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

from config import Config
from logger import BetBogLogger
from database import AsyncSessionLocal
from models import Signal, Match, StrategyConfig
from sqlalchemy import select, desc, func


class RealTelegramBot:
    """–†–µ–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è BetBog"""
    
    def __init__(self, config: Config):
        self.config = config
        self.logger = BetBogLogger("TELEGRAM_BOT", config.LOG_FILE)
        self.application = None
        self.authorized_users = {123456789}  # –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π Telegram ID
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞
            self.application = Application.builder().token(self.config.BOT_TOKEN).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.application.add_handler(CommandHandler("start", self.start_command))
            self.application.add_handler(CommandHandler("menu", self.menu_command))
            self.application.add_handler(CommandHandler("signals", self.signals_command))
            self.application.add_handler(CommandHandler("stats", self.stats_command))
            self.application.add_handler(CommandHandler("matches", self.matches_command))
            self.application.add_handler(CommandHandler("help", self.help_command))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
            self.application.add_handler(CallbackQueryHandler(self.button_callback))
            
            self.logger.success("ü§ñ –†–µ–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {str(e)}")
            return False

    def _is_authorized(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return user_id in self.authorized_users

    def _get_main_menu_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        keyboard = [
            [
                InlineKeyboardButton("üéØ –°–∏–≥–Ω–∞–ª—ã", callback_data="signals"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
            ],
            [
                InlineKeyboardButton("‚öΩ Live –ú–∞—Ç—á–∏", callback_data="matches"),
                InlineKeyboardButton("üîß –°—Ç—Ä–∞—Ç–µ–≥–∏–∏", callback_data="strategies")
            ],
            [
                InlineKeyboardButton("üìà P&L –û—Ç—á–µ—Ç", callback_data="pnl"),
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            ],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_main")]
        ]
        return InlineKeyboardMarkup(keyboard)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        if not self._is_authorized(user_id):
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É")
            return

        welcome_text = """
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ         üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BetBog     ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

ü§ñ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞–≤–æ–∫

üü¢ –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç live –º–∞—Ç—á–∏
üìä 7 —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
üéØ –ü–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:
        """
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=self._get_main_menu_keyboard()
        )

    async def menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user_id = update.effective_user.id
        
        if not self._is_authorized(user_id):
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É")
            return

        await update.message.reply_text(
            "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é BetBog:",
            reply_markup=self._get_main_menu_keyboard()
        )

    async def signals_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã"""
        user_id = update.effective_user.id
        
        if not self._is_authorized(user_id):
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É")
            return

        try:
            session = AsyncSessionLocal()
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤
                total_signals = await session.scalar(select(func.count(Signal.id)))
                active_signals = await session.scalar(
                    select(func.count(Signal.id)).where(Signal.result == "pending")
                )
                won_signals = await session.scalar(
                    select(func.count(Signal.id)).where(Signal.result == "won")
                )
                lost_signals = await session.scalar(
                    select(func.count(Signal.id)).where(Signal.result == "lost")
                )

                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                stmt = (
                    select(Signal)
                    .where(Signal.result == "pending")
                    .order_by(desc(Signal.created_at))
                    .limit(5)
                )
                signals = await session.scalars(stmt)
                signals_list = list(signals)

                winrate = (won_signals / max(won_signals + lost_signals, 1) * 100) if (won_signals or lost_signals) else 0
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
                total_signals = active_signals = won_signals = lost_signals = 0
                signals_list = []
                winrate = 0
            finally:
                await session.close()

            signals_text = f"""
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ           üéØ –°–∏–≥–Ω–∞–ª—ã BetBog              ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals or 0}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_signals or 0}
‚Ä¢ –í—ã–∏–≥—Ä–∞–Ω–æ: {won_signals or 0} 
‚Ä¢ –ü—Ä–æ–∏–≥—Ä–∞–Ω–æ: {lost_signals or 0}
‚Ä¢ Winrate: {winrate:.1f}%

üî¥ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:
            """

            if not signals_list:
                signals_text += "\n‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"
            else:
                for i, signal in enumerate(signals_list, 1):
                    confidence_emoji = "üî•" if signal.confidence > 0.8 else "‚ö°" if signal.confidence > 0.6 else "üìà"
                    signals_text += f"""
{i}. {confidence_emoji} {signal.strategy_name}
   üìä {signal.signal_type} | {signal.confidence:.1%}
   üí∞ –†–∞–∑–º–µ—Ä: {signal.bet_size:.2f}
                    """

            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_signals"),
                    InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="main_menu")
                ]
            ]
            
            await update.message.reply_text(
                signals_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {str(e)}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏–≥–Ω–∞–ª–∞—Ö")

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        user_id = update.effective_user.id
        
        if not self._is_authorized(user_id):
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É")
            return

        try:
            async with AsyncSessionLocal() as session:
                # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                total_signals = await session.scalar(select(func.count(Signal.id)))
                won_signals = await session.scalar(
                    select(func.count(Signal.id)).where(Signal.result == "won")
                )
                lost_signals = await session.scalar(
                    select(func.count(Signal.id)).where(Signal.result == "lost")
                )
                
                # P&L
                total_pnl_result = await session.scalar(
                    select(func.sum(Signal.profit_loss)).where(Signal.profit_loss.isnot(None))
                )
                total_pnl = total_pnl_result or 0
                
                completed_signals = (won_signals or 0) + (lost_signals or 0)
                winrate = (won_signals / completed_signals * 100) if completed_signals > 0 else 0

            stats_text = f"""
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ          üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ BetBog            ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üìà –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
‚Ä¢ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals or 0}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_signals}
‚Ä¢ –í—ã–∏–≥—Ä–∞–Ω–æ: {won_signals or 0}
‚Ä¢ –ü—Ä–æ–∏–≥—Ä–∞–Ω–æ: {lost_signals or 0}
‚Ä¢ Winrate: {winrate:.1f}%

üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
‚Ä¢ –û–±—â–∏–π P&L: {total_pnl:+.2f}
‚Ä¢ ROI: {(total_pnl / max(completed_signals, 1) * 100):+.1f}%
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {(total_pnl / max(completed_signals, 1)):.2f}

üéØ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {(total_signals or 0) / max(1, 7):.1f} —Å–∏–≥–Ω–∞–ª–æ–≤/–¥–µ–Ω—å
‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {'–í—ã—Å–æ–∫–∞—è' if winrate > 60 else '–°—Ä–µ–¥–Ω—è—è' if winrate > 45 else '–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è'}
            """
            
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_stats"),
                    InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="main_menu")
                ]
            ]
            
            await update.message.reply_text(
                stats_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def matches_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å live –º–∞—Ç—á–∏"""
        user_id = update.effective_user.id
        
        if not self._is_authorized(user_id):
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É")
            return

        try:
            async with AsyncSessionLocal() as session:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏
                stmt = select(Match).order_by(desc(Match.updated_at)).limit(10)
                matches = await session.scalars(stmt)
                matches_list = list(matches)

            matches_text = """
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ           ‚öΩ Live –ú–∞—Ç—á–∏                   ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
            """

            if not matches_list:
                matches_text += "\n‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π"
            else:
                matches_text += f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(matches_list)} –º–∞—Ç—á–µ–π:\n"
                
                for i, match in enumerate(matches_list[:5], 1):
                    status = "üî¥ LIVE" if match.status == "live" else "‚ö™ –ó–∞–≤–µ—Ä—à–µ–Ω"
                    matches_text += f"""
{i}. {status} {match.home_team} vs {match.away_team}
   üìä –°—á–µ—Ç: {match.home_score}:{match.away_score} | {match.minute}'
   üèÜ –õ–∏–≥–∞: {match.league}
                    """

            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_matches"),
                    InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="main_menu")
                ]
            ]
            
            await update.message.reply_text(
                matches_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–∞—Ç—á–µ–π: {str(e)}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç—á–∞—Ö")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
        user_id = update.effective_user.id
        
        if not self._is_authorized(user_id):
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É")
            return

        help_text = """
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ           ‚ùì –ü–æ–º–æ—â—å BetBog               ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

ü§ñ BetBog - —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞–≤–æ–∫

üì± –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –ó–∞–ø—É—Å–∫ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /signals - –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ P&L
‚Ä¢ /matches - Live –º–∞—Ç—á–∏
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üéØ –§—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã:
‚Ä¢ –ê–Ω–∞–ª–∏–∑ live —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π
‚Ä¢ 7 –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å—Ç–∞–≤–æ–∫
‚Ä¢ –†–∞—Å—á–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–µ—Ç—Ä–∏–∫ (dxG, momentum, gradient)
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ P&L –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö

üìä –ú–µ—Ç—Ä–∏–∫–∏:
‚Ä¢ dxG - derived Expected Goals
‚Ä¢ Gradient - —Ç—Ä–µ–Ω–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏  
‚Ä¢ Momentum - –∏–º–ø—É–ª—å—Å –∫–æ–º–∞–Ω–¥
‚Ä¢ Wave - –∞–º–ø–ª–∏—Ç—É–¥–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ Tiredness - —Ñ–∞–∫—Ç–æ—Ä —É—Å—Ç–∞–ª–æ—Å—Ç–∏

–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!
        """
        
        keyboard = [
            [InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await update.message.reply_text(
            help_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        user_id = query.from_user.id
        
        if not self._is_authorized(user_id):
            await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É")
            return

        await query.answer()

        if query.data == "main_menu":
            await query.edit_message_text(
                "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é BetBog:",
                reply_markup=self._get_main_menu_keyboard()
            )
        elif query.data == "signals":
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å–∏–≥–Ω–∞–ª–æ–≤
            await self.signals_command(update, context)
        elif query.data == "stats":
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await self.stats_command(update, context)
        elif query.data == "matches":
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É –º–∞—Ç—á–µ–π
            await self.matches_command(update, context)
        elif query.data == "help":
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É –ø–æ–º–æ—â–∏
            await self.help_command(update, context)
        elif query.data.startswith("refresh_"):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            section = query.data.replace("refresh_", "")
            if section == "main":
                await query.edit_message_text(
                    "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é BetBog (–æ–±–Ω–æ–≤–ª–µ–Ω–æ):",
                    reply_markup=self._get_main_menu_keyboard()
                )

    async def send_signal_notification(self, signal_data: Dict[str, Any], match_data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–∏–≥–Ω–∞–ª–µ"""
        try:
            confidence = signal_data.get('confidence', 0)
            confidence_emoji = "üî•" if confidence > 0.8 else "‚ö°" if confidence > 0.6 else "üìà"
            
            notification_text = f"""
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ           üéØ –ù–û–í–´–ô –°–ò–ì–ù–ê–õ –°–¢–ê–í–ö–ò          ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

{confidence_emoji} –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {signal_data.get('strategy_name', 'Unknown')}
‚öΩ –ú–∞—Ç—á: {match_data.get('home_team', 'Unknown')} vs {match_data.get('away_team', 'Unknown')}
üéØ –¢–∏–ø: {signal_data.get('signal_type', 'Unknown')}
üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%}
üí∞ –†–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏: {signal_data.get('bet_size', 0):.2f}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}

üìà –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:
‚Ä¢ dxG: {signal_data.get('details', {}).get('dxg_home', 0):.2f} - {signal_data.get('details', {}).get('dxg_away', 0):.2f}
‚Ä¢ Momentum: {signal_data.get('details', {}).get('momentum', 0):.2f}
‚Ä¢ –ú–∏–Ω—É—Ç–∞: {match_data.get('minute', 0)}'
            """
            
            keyboard = [
                [
                    InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
                    InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="main_menu")
                ]
            ]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            for user_id in self.authorized_users:
                try:
                    await self.application.bot.send_message(
                        chat_id=user_id,
                        text=notification_text,
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            self.logger.success("üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")

    async def send_result_notification(self, signal_data: Dict[str, Any], match_data: Dict[str, Any], result: str, profit_loss: float):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"""
        try:
            result_emoji = "‚úÖ" if result == "won" else "‚ùå" if result == "lost" else "‚è≥"
            pnl_emoji = "üíö" if profit_loss > 0 else "‚ù§Ô∏è" if profit_loss < 0 else "üíõ"
            
            notification_text = f"""
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ        üìà –†–ï–ó–£–õ–¨–¢–ê–¢ –°–ò–ì–ù–ê–õ–ê              ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

{result_emoji} –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.upper()}
üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {signal_data.get('strategy_name', 'Unknown')}
‚öΩ –ú–∞—Ç—á: {match_data.get('home_team', 'Unknown')} vs {match_data.get('away_team', 'Unknown')}
{pnl_emoji} P&L: {profit_loss:+.2f}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}
            """
            
            keyboard = [
                [
                    InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
                    InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="main_menu")
                ]
            ]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            for user_id in self.authorized_users:
                try:
                    await self.application.bot.send_message(
                        chat_id=user_id,
                        text=notification_text,
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            self.logger.success(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {str(e)}")

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        try:
            if not self.application:
                self.logger.error("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
                
            self.logger.success("üöÄ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")
            await self.application.run_polling()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling: {str(e)}")

    async def stop_polling(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            if self.application:
                await self.application.stop()
            self.logger.info("üõë Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {str(e)}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
async def create_telegram_bot(config: Config) -> RealTelegramBot:
    """–°–æ–∑–¥–∞—Ç—å –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç–∞"""
    bot = RealTelegramBot(config)
    success = await bot.initialize()
    if not success:
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram –±–æ—Ç–∞")
    return bot


if __name__ == "__main__":
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    async def main():
        config = Config()
        bot = await create_telegram_bot(config)
        await bot.start_polling()

    asyncio.run(main())