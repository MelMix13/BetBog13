#!/usr/bin/env python3
"""
Telegram –±–æ—Ç —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –∫–Ω–æ–ø–æ—á–Ω—ã–º –º–µ–Ω—é –¥–ª—è BetBog
"""
import asyncio
import aiohttp
import os
import json
from typing import Dict, Any, List
from datetime import datetime, date
import asyncpg

class TelegramMenuBot:
    """Telegram –±–æ—Ç —Å –∫–Ω–æ–ø–æ—á–Ω—ã–º –º–µ–Ω—é"""
    
    def __init__(self):
        self.bot_token = os.getenv("BOT_TOKEN", "7228733029:AAFVPzKHUSRidigzYSy_IANt8rWzjjPBDPA")
        self.database_url = os.getenv("DATABASE_URL")
        self.running = False
        
    async def get_db_connection(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            return await asyncpg.connect(self.database_url)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return None

    async def send_message(self, chat_id: int, text: str, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            data = {
                "chat_id": chat_id, 
                "text": text, 
                "parse_mode": "HTML"
            }
            
            if reply_markup:
                data["reply_markup"] = json.dumps(reply_markup)
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status}")
                        return False
                        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return False

    async def answer_callback_query(self, callback_query_id: str, text: str = ""):
        """–û—Ç–≤–µ—Ç –Ω–∞ callback query"""
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/answerCallbackQuery"
            data = {"callback_query_id": callback_query_id, "text": text}
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    return response.status == 200
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")
            return False

    def create_main_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        return {
            "inline_keyboard": [
                [
                    {"text": "üìä Live –º–∞—Ç—á–∏", "callback_data": "live_matches"},
                    {"text": "‚ö° –°–∏–≥–Ω–∞–ª—ã", "callback_data": "signals"}
                ],
                [
                    {"text": "üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏", "callback_data": "strategies"},
                    {"text": "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "statistics"}
                ],
                [
                    {"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "callback_data": "settings"},
                    {"text": "‚ùì –ü–æ–º–æ—â—å", "callback_data": "help"}
                ],
                [
                    {"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback_data": "refresh"}
                ]
            ]
        }

    async def get_live_matches_count(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ live –º–∞—Ç—á–µ–π"""
        conn = await self.get_db_connection()
        if not conn:
            return "–ù/–î"
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
            query = """
                SELECT COUNT(*) 
                FROM matches 
                WHERE updated_at > NOW() - INTERVAL '1 hour'
            """
            count = await conn.fetchval(query)
            return count or 0
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è live –º–∞—Ç—á–µ–π: {e}")
            return "–û—à–∏–±–∫–∞"
        finally:
            await conn.close()

    async def get_recent_signals(self, limit: int = 10):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        conn = await self.get_db_connection()
        if not conn:
            return []
        
        try:
            query = """
                SELECT strategy_name, signal_type, confidence, result, created_at
                FROM signals 
                ORDER BY created_at DESC 
                LIMIT $1
            """
            rows = await conn.fetch(query, limit)
            return [dict(row) for row in rows]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return []
        finally:
            await conn.close()

    async def get_strategy_configs(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        conn = await self.get_db_connection()
        if not conn:
            return []
        
        try:
            query = """
                SELECT strategy_name, thresholds, enabled, total_signals, win_rate
                FROM strategy_configs 
                ORDER BY strategy_name
            """
            rows = await conn.fetch(query)
            return [dict(row) for row in rows]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
            return []
        finally:
            await conn.close()

    async def get_system_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        conn = await self.get_db_connection()
        if not conn:
            return {}
        
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = date.today()
            
            queries = {
                "total_signals": "SELECT COUNT(*) FROM signals",
                "today_signals": "SELECT COUNT(*) FROM signals WHERE DATE(created_at) = $1",
                "pending_signals": "SELECT COUNT(*) FROM signals WHERE result = 'pending'",
                "win_signals": "SELECT COUNT(*) FROM signals WHERE result = 'win'",
                "total_matches": "SELECT COUNT(*) FROM matches"
            }
            
            stats = {}
            for key, query in queries.items():
                if key == "today_signals":
                    stats[key] = await conn.fetchval(query, today)
                else:
                    stats[key] = await conn.fetchval(query)
                    
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π win rate
            if stats["total_signals"] > 0:
                stats["win_rate"] = (stats["win_signals"] / stats["total_signals"]) * 100
            else:
                stats["win_rate"] = 0
                
            return stats
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
        finally:
            await conn.close()

    async def handle_live_matches(self, chat_id: int, callback_query_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ Live –º–∞—Ç—á–∏"""
        await self.answer_callback_query(callback_query_id, "–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –æ live –º–∞—Ç—á–∞—Ö...")
        
        live_count = await self.get_live_matches_count()
        
        message = f"""üìä <b>Live –º–∞—Ç—á–∏</b>

üî¥ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç—á–∏:</b> {live_count}
‚ö° –ê–Ω–∞–ª–∏–∑ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
üìà –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–µ—Ç—Ä–∏–∫

<b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –º–µ—Ç—Ä–∏–∫–∏:</b>
‚Ä¢ dxG (–ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –≥–æ–ª—ã)
‚Ä¢ Gradient (—Ç—Ä–µ–Ω–¥—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
‚Ä¢ Momentum (–∏–º–ø—É–ª—å—Å –∫–æ–º–∞–Ω–¥)
‚Ä¢ Wave amplitude (–∞–º–ø–ª–∏—Ç—É–¥–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏)
‚Ä¢ Tiredness factor (—Ñ–∞–∫—Ç–æ—Ä —É—Å—Ç–∞–ª–æ—Å—Ç–∏)
‚Ä¢ Stability (—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å)

üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥"""

        await self.send_message(chat_id, message, self.create_main_menu())

    async def handle_signals(self, chat_id: int, callback_query_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –°–∏–≥–Ω–∞–ª—ã"""
        await self.answer_callback_query(callback_query_id, "–ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã...")
        
        signals = await self.get_recent_signals(10)
        
        if not signals:
            message = """‚ö° <b>–°–∏–≥–Ω–∞–ª—ã</b>

üîç <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>

–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç live –º–∞—Ç—á–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–µ—Ç—Ä–∏–∫."""
        else:
            message = "‚ö° <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–≥–Ω–∞–ª–æ–≤</b>\n\n"
            
            for i, signal in enumerate(signals, 1):
                status_emoji = "üü°" if signal['result'] == 'pending' else ("üü¢" if signal['result'] == 'win' else "üî¥")
                confidence_pct = signal['confidence'] * 100 if signal['confidence'] else 0
                created_time = signal['created_at'].strftime("%d.%m %H:%M") if signal['created_at'] else "–ù/–î"
                
                message += f"{i}. {status_emoji} <b>{signal['strategy_name']}</b>\n"
                message += f"   üìä {signal['signal_type']} ({confidence_pct:.1f}%)\n"
                message += f"   üìÖ {created_time}\n\n"

        await self.send_message(chat_id, message, self.create_main_menu())

    async def handle_strategies(self, chat_id: int, callback_query_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        await self.answer_callback_query(callback_query_id, "–ó–∞–≥—Ä—É–∂–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
        
        strategies = await self.get_strategy_configs()
        
        if not strategies:
            message = """üéØ <b>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏</b>

‚öôÔ∏è <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>

–°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        else:
            message = "üéØ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏</b>\n\n"
            
            for strategy in strategies:
                status_emoji = "üü¢" if strategy.get('enabled', True) else "üî¥"
                strategy_name = strategy['strategy_name']
                total_signals = strategy.get('total_signals', 0)
                win_rate = strategy.get('win_rate', 0)
                
                message += f"{status_emoji} <b>{strategy_name}</b>\n"
                message += f"   üìä –°–∏–≥–Ω–∞–ª–æ–≤: {total_signals}\n"
                message += f"   üéØ Win Rate: {win_rate:.1f}%\n"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ä–æ–≥–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if strategy.get('thresholds'):
                    try:
                        thresholds = json.loads(strategy['thresholds']) if isinstance(strategy['thresholds'], str) else strategy['thresholds']
                        if thresholds:
                            message += "   ‚öôÔ∏è –ü–æ—Ä–æ–≥–∏: "
                            threshold_parts = []
                            for key, value in thresholds.items():
                                threshold_parts.append(f"{key}={value}")
                            message += ", ".join(threshold_parts[:3])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                            message += "\n"
                    except:
                        pass
                        
                message += "\n"

        await self.send_message(chat_id, message, self.create_main_menu())

    async def handle_statistics(self, chat_id: int, callback_query_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        await self.answer_callback_query(callback_query_id, "–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        stats = await self.get_system_statistics()
        
        if not stats:
            message = """üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

‚ùå <b>–î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</b>

–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö."""
        else:
            message = f"""üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>

üìä <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {stats.get('total_signals', 0)}
‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.get('today_signals', 0)}
‚Ä¢ –û–∂–∏–¥–∞—é—â–∏—Ö: {stats.get('pending_signals', 0)}
‚Ä¢ –í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö: {stats.get('win_signals', 0)}

üéØ <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ Win Rate: {stats.get('win_rate', 0):.1f}%

‚öΩ <b>–ú–∞—Ç—á–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats.get('total_matches', 0)}

üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""

        await self.send_message(chat_id, message, self.create_main_menu())

    async def handle_settings(self, chat_id: int, callback_query_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
        await self.answer_callback_query(callback_query_id)
        
        message = """‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b>

üîß <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: 60 —Å–µ–∫
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –º–∞—Ç—á–µ–π: 20 –∑–∞ —Ü–∏–∫–ª
‚Ä¢ ML –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
‚Ä¢ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: –≤–∫–ª—é—á–µ–Ω–∞

üìä <b>–ü–æ—Ä–æ–≥–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b>
‚Ä¢ Confidence: ‚â• 0.7
‚Ä¢ Momentum: ‚â• 0.6
‚Ä¢ Gradient: ‚â• 0.5

‚ö° –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ"""

        await self.send_message(chat_id, message, self.create_main_menu())

    async def handle_help(self, chat_id: int, callback_query_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å"""
        await self.answer_callback_query(callback_query_id)
        
        message = """‚ùì <b>–ü–æ–º–æ—â—å –ø–æ BetBog Bot</b>

ü§ñ <b>–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç live —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏
‚Ä¢ –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Å—Ç–∞–≤–æ–∫
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

üìä <b>–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é:</b>
‚Ä¢ Live –º–∞—Ç—á–∏ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π
‚Ä¢ –°–∏–≥–Ω–∞–ª—ã - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–≥–Ω–∞–ª–æ–≤
‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã

üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:</b>
–ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö

‚ö° –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –±–µ–∑ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π"""

        await self.send_message(chat_id, message, self.create_main_menu())

    async def handle_refresh(self, chat_id: int, callback_query_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –û–±–Ω–æ–≤–∏—Ç—å"""
        await self.answer_callback_query(callback_query_id, "–û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        live_count = await self.get_live_matches_count()
        stats = await self.get_system_statistics()
        
        message = f"""üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>

üìä <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b>
‚Ä¢ Live –º–∞—Ç—á–∏: {live_count}
‚Ä¢ –°–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.get('today_signals', 0)}
‚Ä¢ –û–∂–∏–¥–∞—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {stats.get('pending_signals', 0)}
‚Ä¢ Win Rate: {stats.get('win_rate', 0):.1f}%

üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"""

        await self.send_message(chat_id, message, self.create_main_menu())

    async def handle_command(self, chat_id: int, text: str, user_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"üì® –ö–æ–º–∞–Ω–¥–∞ –æ—Ç {user_name}: {text}")
        
        if text.startswith("/start") or text.startswith("/menu"):
            message = """üèÜ <b>BetBog Monitoring Bot</b>

ü§ñ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
üìä –ê–Ω–∞–ª–∏–∑ live –º–∞—Ç—á–µ–π —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"""
            
            await self.send_message(chat_id, message, self.create_main_menu())
            
        else:
            message = f"""–ö–æ–º–∞–Ω–¥–∞: <code>{text}</code>

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
            await self.send_message(chat_id, message, self.create_main_menu())

    async def handle_callback(self, chat_id: int, callback_data: str, callback_query_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        print(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {callback_data}")
        
        if callback_data == "live_matches":
            await self.handle_live_matches(chat_id, callback_query_id)
        elif callback_data == "signals":
            await self.handle_signals(chat_id, callback_query_id)
        elif callback_data == "strategies":
            await self.handle_strategies(chat_id, callback_query_id)
        elif callback_data == "statistics":
            await self.handle_statistics(chat_id, callback_query_id)
        elif callback_data == "settings":
            await self.handle_settings(chat_id, callback_query_id)
        elif callback_data == "help":
            await self.handle_help(chat_id, callback_query_id)
        elif callback_data == "refresh":
            await self.handle_refresh(chat_id, callback_query_id)
        else:
            await self.answer_callback_query(callback_query_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    async def handle_update(self, update: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
        try:
            if "message" in update:
                message = update["message"]
                chat_id = message["chat"]["id"]
                text = message.get("text", "")
                user = message.get("from", {})
                user_name = user.get("first_name", "Unknown")
                
                await self.handle_command(chat_id, text, user_name)
                
            elif "callback_query" in update:
                callback_query = update["callback_query"]
                chat_id = callback_query["message"]["chat"]["id"]
                callback_data = callback_query["data"]
                callback_query_id = callback_query["id"]
                
                await self.handle_callback(chat_id, callback_data, callback_query_id)
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")

    async def process_updates(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        last_update_id = 0
        
        while self.running:
            try:
                url = f"https://api.telegram.org/bot{self.bot_token}/getUpdates"
                params = {"offset": last_update_id + 1, "timeout": 30}
                
                async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=35)) as session:
                    async with session.get(url, params=params) as response:
                        if response.status == 200:
                            data = await response.json()
                            if data.get("ok"):
                                for update in data.get("result", []):
                                    await self.handle_update(update)
                                    last_update_id = max(last_update_id, update["update_id"])
                        else:
                            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {response.status}")
                        
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ polling: {str(e)}")
                await asyncio.sleep(5)

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.running = True
        print("üöÄ BetBog Menu Bot –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏")
        await self.process_updates()

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.running = False
        print("üõë Menu Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = TelegramMenuBot()
    try:
        await bot.start()
    except KeyboardInterrupt:
        bot.stop()
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

if __name__ == "__main__":
    asyncio.run(main())