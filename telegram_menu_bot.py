#!/usr/bin/env python3
"""
BetBog Telegram Bot —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –º–µ–Ω—é
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
"""

import asyncio
import os
from datetime import datetime
from typing import Dict, Any, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode

from config import Config
from logger import BetBogLogger
from database import get_session
from models import Signal, Match, StrategyConfig
from sqlalchemy import select, desc, func
from sqlalchemy.orm import selectinload


class BetBogTelegramBot:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π Telegram –±–æ—Ç –¥–ª—è BetBog —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –º–µ–Ω—é"""
    
    def __init__(self, config: Config):
        self.config = config
        self.logger = BetBogLogger("BOT", config.LOG_FILE)
        self.application = None
        self.authorized_users = {123456789}  # –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π Telegram ID
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞"""
        try:
            self.application = Application.builder().token(self.config.BOT_TOKEN).build()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
            commands = [
                ("start", "üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
                ("menu", "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
                ("signals", "üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã"),
                ("stats", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                ("matches", "‚öΩ Live –º–∞—Ç—á–∏"),
                ("settings", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
                ("help", "‚ùì –ü–æ–º–æ—â—å")
            ]
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é
            bot_commands = [BotCommand(cmd, desc) for cmd, desc in commands]
            await self.application.bot.set_my_commands(bot_commands)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self.application.add_handler(CommandHandler("start", self.start_command))
            self.application.add_handler(CommandHandler("menu", self.menu_command))
            self.application.add_handler(CommandHandler("signals", self.signals_command))
            self.application.add_handler(CommandHandler("stats", self.stats_command))
            self.application.add_handler(CommandHandler("matches", self.matches_command))
            self.application.add_handler(CommandHandler("settings", self.settings_command))
            self.application.add_handler(CommandHandler("help", self.help_command))
            self.application.add_handler(CallbackQueryHandler(self.button_callback))
            
            self.logger.success("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {str(e)}")
            raise

    def _is_authorized(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return user_id in self.authorized_users

    def _get_main_menu_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        keyboard = [
            [
                InlineKeyboardButton("üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã", callback_data="signals"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
            ],
            [
                InlineKeyboardButton("‚öΩ Live –º–∞—Ç—á–∏", callback_data="matches"),
                InlineKeyboardButton("üí∞ P&L –æ—Ç—á–µ—Ç", callback_data="pnl")
            ],
            [
                InlineKeyboardButton("üîß –°—Ç—Ä–∞—Ç–µ–≥–∏–∏", callback_data="strategies"),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
            ],
            [
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_main"),
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)

    def _get_signals_keyboard(self) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        keyboard = [
            [
                InlineKeyboardButton("üî¥ –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data="signals_active"),
                InlineKeyboardButton("‚úÖ –í—ã–∏–≥—Ä—ã—à–Ω—ã–µ", callback_data="signals_won")
            ],
            [
                InlineKeyboardButton("‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã–µ", callback_data="signals_lost"),
                InlineKeyboardButton("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ", callback_data="signals_pending")
            ],
            [
                InlineKeyboardButton("üìà –¢–æ–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", callback_data="signals_top"),
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_signals")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)

    def _get_stats_keyboard(self) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        keyboard = [
            [
                InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="stats_today"),
                InlineKeyboardButton("üìÖ –≠—Ç–∞ –Ω–µ–¥–µ–ª—è", callback_data="stats_week")
            ],
            [
                InlineKeyboardButton("üìÖ –≠—Ç–æ—Ç –º–µ—Å—è—Ü", callback_data="stats_month"),
                InlineKeyboardButton("üìä –û–±—â–∞—è", callback_data="stats_all")
            ],
            [
                InlineKeyboardButton("üíé –ü–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º", callback_data="stats_strategies"),
                InlineKeyboardButton("üéØ –ü–æ —Ç–∏–ø–∞–º", callback_data="stats_types")
            ],
            [
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_stats"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        if not self._is_authorized(user_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        welcome_text = """
ü§ñ <b>BetBog Monitoring Bot</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫!

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
üéØ –ê–Ω–∞–ª–∏–∑ live –º–∞—Ç—á–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
üìä –†–∞—Å—á–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–µ—Ç—Ä–∏–∫ (dxG, –≥—Ä–∞–¥–∏–µ–Ω—Ç, momentum)
üí∞ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ P&L –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
üîß –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å—Ç–∞–≤–æ–∫
üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã

<b>–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç:</b>
‚Ä¢ Live —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏
‚Ä¢ 7 —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å—Ç–∞–≤–æ–∫
‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç bet365 API

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:
        """
        
        await update.message.reply_text(
            welcome_text,
            parse_mode=ParseMode.HTML,
            reply_markup=self._get_main_menu_keyboard()
        )

    async def menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user_id = update.effective_user.id
        
        if not self._is_authorized(user_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        await update.message.reply_text(
            "üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é BetBog</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode=ParseMode.HTML,
            reply_markup=self._get_main_menu_keyboard()
        )

    async def signals_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã"""
        user_id = update.effective_user.id
        
        if not self._is_authorized(user_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        await self._show_signals_menu(update, context)

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        user_id = update.effective_user.id
        
        if not self._is_authorized(user_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        await self._show_stats_menu(update, context)

    async def matches_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å live –º–∞—Ç—á–∏"""
        user_id = update.effective_user.id
        
        if not self._is_authorized(user_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        await self._show_live_matches(update, context)

    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        user_id = update.effective_user.id
        
        if not self._is_authorized(user_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        await self._show_settings(update, context)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
        help_text = """
‚ùì <b>–ü–æ–º–æ—â—å BetBog Bot</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/signals - –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã
/matches - Live –º–∞—Ç—á–∏
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏

<b>–§—É–Ω–∫—Ü–∏–∏:</b>
üéØ <b>–°–∏–≥–Ω–∞–ª—ã</b> - –∞–Ω–∞–ª–∏–∑ betting —Å–∏–≥–Ω–∞–ª–æ–≤
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - P&L, winrate, ROI
‚öΩ <b>–ú–∞—Ç—á–∏</b> - live –¥–∞–Ω–Ω—ã–µ –∏ –º–µ—Ç—Ä–∏–∫–∏
üîß <b>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏</b> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤

<b>–ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã:</b>
‚Ä¢ dxG - derived Expected Goals
‚Ä¢ Gradient - —Ç—Ä–µ–Ω–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ Wave - –∞–º–ø–ª–∏—Ç—É–¥–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ Momentum - –∏–º–ø—É–ª—å—Å –∫–æ–º–∞–Ω–¥
‚Ä¢ Tiredness - —Ñ–∞–∫—Ç–æ—Ä —É—Å—Ç–∞–ª–æ—Å—Ç–∏

<b>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b>
‚Ä¢ DxG Hunter - –ø–æ–∏—Å–∫ –≤—ã—Å–æ–∫–æ–≥–æ xG
‚Ä¢ Momentum Rider - –∏–≥—Ä–∞ –Ω–∞ –∏–º–ø—É–ª—å—Å–µ
‚Ä¢ Wave Catcher - –∞–Ω–∞–ª–∏–∑ –≤–æ–ª–Ω
‚Ä¢ Late Drama - –ø–æ–∑–¥–Ω–∏–µ –≥–æ–ª—ã
‚Ä¢ Comeback King - –∫–∞–º–±—ç–∫–∏
‚Ä¢ Defensive Wall - –æ–±–æ—Ä–æ–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–≥—Ä–∞
‚Ä¢ Quick Strike - –±—ã—Å—Ç—Ä—ã–µ –≥–æ–ª—ã

–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        
        await update.message.reply_text(
            help_text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        if not self._is_authorized(user_id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        data = query.data

        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if data == "main_menu":
            await self._show_main_menu(query)
        
        # –°–∏–≥–Ω–∞–ª—ã
        elif data == "signals":
            await self._show_signals_menu_callback(query)
        elif data.startswith("signals_"):
            await self._handle_signals_callback(query, data)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        elif data == "stats":
            await self._show_stats_menu_callback(query)
        elif data.startswith("stats_"):
            await self._handle_stats_callback(query, data)
        
        # –ú–∞—Ç—á–∏
        elif data == "matches":
            await self._show_live_matches_callback(query)
        
        # P&L
        elif data == "pnl":
            await self._show_pnl_report(query)
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏
        elif data == "strategies":
            await self._show_strategies(query)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        elif data == "settings":
            await self._show_settings_callback(query)
        
        # –ü–æ–º–æ—â—å
        elif data == "help":
            await self._show_help_callback(query)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏—è
        elif data.startswith("refresh_"):
            await self._handle_refresh(query, data)

    async def _show_main_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        text = """
üìã <b>BetBog Monitoring Dashboard</b>

üü¢ <b>–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞</b>
üìä –ê–Ω–∞–ª–∏–∑ live –º–∞—Ç—á–µ–π
üíé 7 —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç
üéØ –ü–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:
        """
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=self._get_main_menu_keyboard()
        )

    async def _show_signals_menu_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–∏–≥–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ callback"""
        async with get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤
            total_signals = await session.scalar(select(func.count(Signal.id)))
            active_signals = await session.scalar(
                select(func.count(Signal.id)).where(Signal.result == "pending")
            )
            won_signals = await session.scalar(
                select(func.count(Signal.id)).where(Signal.result == "won")
            )
            lost_signals = await session.scalar(
                select(func.count(Signal.id)).where(Signal.result == "lost")
            )

        text = f"""
üéØ <b>–°–∏–≥–Ω–∞–ª—ã BetBog</b>

üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals or 0}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_signals or 0}
‚Ä¢ –í—ã–∏–≥—Ä–∞–Ω–æ: {won_signals or 0}
‚Ä¢ –ü—Ä–æ–∏–≥—Ä–∞–Ω–æ: {lost_signals or 0}

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
        """
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=self._get_signals_keyboard()
        )

    async def _show_signals_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–∏–≥–Ω–∞–ª–æ–≤"""
        async with get_session() as session:
            total_signals = await session.scalar(select(func.count(Signal.id)))
            active_signals = await session.scalar(
                select(func.count(Signal.id)).where(Signal.result == "pending")
            )

        text = f"""
üéØ <b>–°–∏–≥–Ω–∞–ª—ã BetBog</b>

üìä –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals or 0}
üî¥ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_signals or 0}

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
        """
        
        await update.message.reply_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=self._get_signals_keyboard()
        )

    async def _show_stats_menu_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ callback"""
        text = """
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ BetBog</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
        """
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=self._get_stats_keyboard()
        )

    async def _show_stats_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        text = """
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ BetBog</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
        """
        
        await update.message.reply_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=self._get_stats_keyboard()
        )

    async def _show_live_matches(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å live –º–∞—Ç—á–∏"""
        async with get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏
            stmt = select(Match).order_by(desc(Match.updated_at)).limit(10)
            matches = await session.scalars(stmt)
            matches_list = list(matches)

        if not matches_list:
            text = "‚öΩ <b>Live –º–∞—Ç—á–∏</b>\n\n‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π"
        else:
            text = "‚öΩ <b>Live –º–∞—Ç—á–∏</b>\n\n"
            for match in matches_list[:5]:
                status = "üî¥ LIVE" if match.status == "live" else "‚ö™ –ó–∞–≤–µ—Ä—à–µ–Ω"
                text += f"{status} <b>{match.home_team}</b> vs <b>{match.away_team}</b>\n"
                text += f"üìä {match.home_score}:{match.away_score} | {match.minute}'\n"
                text += f"üèÜ {match.league}\n\n"

        keyboard = [
            [
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_matches"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
            ]
        ]
        
        await update.message.reply_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _show_live_matches_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å live –º–∞—Ç—á–∏ —á–µ—Ä–µ–∑ callback"""
        async with get_session() as session:
            stmt = select(Match).order_by(desc(Match.updated_at)).limit(10)
            matches = await session.scalars(stmt)
            matches_list = list(matches)

        if not matches_list:
            text = "‚öΩ <b>Live –º–∞—Ç—á–∏</b>\n\n‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π"
        else:
            text = "‚öΩ <b>Live –º–∞—Ç—á–∏</b>\n\n"
            for match in matches_list[:5]:
                status = "üî¥ LIVE" if match.status == "live" else "‚ö™ –ó–∞–≤–µ—Ä—à–µ–Ω"
                text += f"{status} <b>{match.home_team}</b> vs <b>{match.away_team}</b>\n"
                text += f"üìä {match.home_score}:{match.away_score} | {match.minute}'\n"
                text += f"üèÜ {match.league}\n\n"

        keyboard = [
            [
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_matches"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
            ]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _show_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        text = """
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ BetBog</b>

üîß <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ API: bet365 ‚úÖ
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL ‚úÖ
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –ê–∫—Ç–∏–≤–µ–Ω ‚úÖ
‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏: 7 –∞–∫—Ç–∏–≤–Ω—ã—Ö ‚úÖ

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–∞—Ö
‚Ä¢ P&L –∞–ª–µ—Ä—Ç—ã
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        """
        
        keyboard = [
            [
                InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications"),
                InlineKeyboardButton("üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏", callback_data="settings_strategies")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        await update.message.reply_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _show_settings_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ callback"""
        text = """
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ BetBog</b>

üîß <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ API: bet365 ‚úÖ
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL ‚úÖ
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –ê–∫—Ç–∏–≤–µ–Ω ‚úÖ
‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏: 7 –∞–∫—Ç–∏–≤–Ω—ã—Ö ‚úÖ

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–∞—Ö
‚Ä¢ P&L –∞–ª–µ—Ä—Ç—ã
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        """
        
        keyboard = [
            [
                InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications"),
                InlineKeyboardButton("üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏", callback_data="settings_strategies")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _show_help_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å —á–µ—Ä–µ–∑ callback"""
        help_text = """
‚ùì <b>–ü–æ–º–æ—â—å BetBog Bot</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
üéØ <b>–°–∏–≥–Ω–∞–ª—ã</b> - betting —Å–∏–≥–Ω–∞–ª—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - P&L, winrate, ROI –∞–Ω–∞–ª–∏–∑
‚öΩ <b>–ú–∞—Ç—á–∏</b> - live –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏
üîß <b>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏</b> - –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã

<b>–ú–µ—Ç—Ä–∏–∫–∏:</b>
‚Ä¢ dxG - derived Expected Goals
‚Ä¢ Gradient - —Ç—Ä–µ–Ω–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ Momentum - –∏–º–ø—É–ª—å—Å –∫–æ–º–∞–Ω–¥
‚Ä¢ Wave - –∞–º–ø–ª–∏—Ç—É–¥–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏

–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ 24/7!
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        
        await query.edit_message_text(
            help_text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _handle_signals_callback(self, query, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callbacks –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
        if data == "signals_active":
            await self._show_active_signals(query)
        elif data == "signals_won":
            await self._show_won_signals(query)
        elif data == "signals_lost":
            await self._show_lost_signals(query)
        elif data == "signals_pending":
            await self._show_pending_signals(query)
        elif data == "refresh_signals":
            await self._show_signals_menu_callback(query)

    async def _show_active_signals(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
        async with get_session() as session:
            stmt = (
                select(Signal)
                .where(Signal.result == "pending")
                .options(selectinload(Signal.match))
                .order_by(desc(Signal.created_at))
                .limit(5)
            )
            signals = await session.scalars(stmt)
            signals_list = list(signals)

        if not signals_list:
            text = "üéØ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã</b>\n\n‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"
        else:
            text = "üéØ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã</b>\n\n"
            for signal in signals_list:
                match = signal.match
                confidence_emoji = "üî•" if signal.confidence > 0.8 else "‚ö°" if signal.confidence > 0.6 else "üìà"
                text += f"{confidence_emoji} <b>{signal.strategy_name}</b>\n"
                text += f"‚öΩ {match.home_team} vs {match.away_team}\n"
                text += f"üéØ {signal.signal_type} | {signal.confidence:.1%}\n"
                text += f"üí∞ –†–∞–∑–º–µ—Ä: {signal.bet_size:.2f}\n\n"

        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_signals")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="signals")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _show_won_signals(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
        async with get_session() as session:
            stmt = (
                select(Signal)
                .where(Signal.result == "won")
                .options(selectinload(Signal.match))
                .order_by(desc(Signal.created_at))
                .limit(5)
            )
            signals = await session.scalars(stmt)
            signals_list = list(signals)

        if not signals_list:
            text = "‚úÖ <b>–í—ã–∏–≥—Ä—ã—à–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã</b>\n\n‚ùå –ù–µ—Ç –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"
        else:
            text = "‚úÖ <b>–í—ã–∏–≥—Ä—ã—à–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã</b>\n\n"
            total_profit = 0
            for signal in signals_list:
                match = signal.match
                profit = signal.profit_loss or 0
                total_profit += profit
                text += f"‚úÖ <b>{signal.strategy_name}</b>\n"
                text += f"‚öΩ {match.home_team} vs {match.away_team}\n"
                text += f"üéØ {signal.signal_type} | {signal.confidence:.1%}\n"
                text += f"üí∞ –ü—Ä–∏–±—ã–ª—å: +{profit:.2f}\n\n"
            
            text += f"üíé <b>–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: +{total_profit:.2f}</b>"

        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_signals")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="signals")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _show_lost_signals(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
        async with get_session() as session:
            stmt = (
                select(Signal)
                .where(Signal.result == "lost")
                .options(selectinload(Signal.match))
                .order_by(desc(Signal.created_at))
                .limit(5)
            )
            signals = await session.scalars(stmt)
            signals_list = list(signals)

        if not signals_list:
            text = "‚ùå <b>–ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã</b>\n\n‚ùå –ù–µ—Ç –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"
        else:
            text = "‚ùå <b>–ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã</b>\n\n"
            total_loss = 0
            for signal in signals_list:
                match = signal.match
                loss = signal.profit_loss or 0
                total_loss += loss
                text += f"‚ùå <b>{signal.strategy_name}</b>\n"
                text += f"‚öΩ {match.home_team} vs {match.away_team}\n"
                text += f"üéØ {signal.signal_type} | {signal.confidence:.1%}\n"
                text += f"üí∏ –£–±—ã—Ç–æ–∫: {loss:.2f}\n\n"
            
            text += f"üìâ <b>–û–±—â–∏–π —É–±—ã—Ç–æ–∫: {total_loss:.2f}</b>"

        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_signals")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="signals")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _show_pending_signals(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã"""
        await self._show_active_signals(query)  # –¢–æ –∂–µ —Å–∞–º–æ–µ —á—Ç–æ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ

    async def _handle_stats_callback(self, query, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callbacks –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        period = data.replace("stats_", "")
        await self._show_stats_for_period(query, period)

    async def _show_stats_for_period(self, query, period):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        async with get_session() as session:
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_signals = await session.scalar(select(func.count(Signal.id)))
            won_signals = await session.scalar(
                select(func.count(Signal.id)).where(Signal.result == "won")
            )
            lost_signals = await session.scalar(
                select(func.count(Signal.id)).where(Signal.result == "lost")
            )
            
            # –†–∞—Å—á–µ—Ç –≤–∏–Ω—Ä–µ–π—Ç–∞
            completed_signals = (won_signals or 0) + (lost_signals or 0)
            winrate = (won_signals / completed_signals * 100) if completed_signals > 0 else 0
            
            # –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
            total_pnl_result = await session.scalar(
                select(func.sum(Signal.profit_loss)).where(Signal.profit_loss.isnot(None))
            )
            total_pnl = total_pnl_result or 0

        period_names = {
            "today": "–°–µ–≥–æ–¥–Ω—è",
            "week": "–≠—Ç–∞ –Ω–µ–¥–µ–ª—è", 
            "month": "–≠—Ç–æ—Ç –º–µ—Å—è—Ü",
            "all": "–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è"
        }
        
        period_name = period_names.get(period, "–ó–∞ –ø–µ—Ä–∏–æ–¥")
        
        text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - {period_name}</b>

üìà <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals or 0}
‚Ä¢ –í—ã–∏–≥—Ä–∞–Ω–æ: {won_signals or 0}
‚Ä¢ –ü—Ä–æ–∏–≥—Ä–∞–Ω–æ: {lost_signals or 0}
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {winrate:.1f}%

üí∞ <b>P&L:</b>
‚Ä¢ –û–±—â–∏–π P&L: {total_pnl:+.2f}
‚Ä¢ ROI: {(total_pnl / max(completed_signals, 1) * 100):+.1f}%

üéØ <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª: {(total_pnl / max(completed_signals, 1)):.2f}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {(total_signals or 0) / max(1, 7):.1f} —Å–∏–≥–Ω–∞–ª–æ–≤/–¥–µ–Ω—å
        """
        
        keyboard = [
            [
                InlineKeyboardButton("üìÖ –î—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="stats"),
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_stats")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _show_pnl_report(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å P&L –æ—Ç—á–µ—Ç"""
        async with get_session() as session:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
            stmt = (
                select(Signal.strategy_name, 
                       func.count(Signal.id).label('total'),
                       func.sum(Signal.profit_loss).label('pnl'))
                .where(Signal.profit_loss.isnot(None))
                .group_by(Signal.strategy_name)
                .order_by(func.sum(Signal.profit_loss).desc())
            )
            
            strategy_stats = await session.execute(stmt)
            results = strategy_stats.fetchall()

        text = "üí∞ <b>P&L –û—Ç—á–µ—Ç –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º</b>\n\n"
        
        if not results:
            text += "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        else:
            total_pnl = 0
            for row in results:
                strategy, total, pnl = row
                total_pnl += pnl or 0
                pnl_emoji = "üíö" if (pnl or 0) > 0 else "‚ù§Ô∏è" if (pnl or 0) < 0 else "üíõ"
                text += f"{pnl_emoji} <b>{strategy}</b>\n"
                text += f"üìä –°–∏–≥–Ω–∞–ª–æ–≤: {total} | P&L: {pnl or 0:+.2f}\n\n"
            
            text += f"üíé <b>–û–±—â–∏–π P&L: {total_pnl:+.2f}</b>"

        keyboard = [
            [
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_pnl"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
            ]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _show_strategies(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        async with get_session() as session:
            stmt = select(StrategyConfig).order_by(StrategyConfig.name)
            strategies = await session.scalars(stmt)
            strategies_list = list(strategies)

        text = "üîß <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ BetBog</b>\n\n"
        
        if not strategies_list:
            text += "‚ùå –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"
        else:
            for strategy in strategies_list:
                status_emoji = "üü¢" if strategy.enabled else "üî¥"
                text += f"{status_emoji} <b>{strategy.name}</b>\n"
                text += f"üìä Enabled: {'–î–∞' if strategy.enabled else '–ù–µ—Ç'}\n"
                if strategy.thresholds:
                    text += f"üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {len(strategy.thresholds)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n"
                text += "\n"

        keyboard = [
            [
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data="config_strategies"),
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_strategies")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _handle_refresh(self, query, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        refresh_type = data.replace("refresh_", "")
        
        if refresh_type == "main":
            await self._show_main_menu(query)
        elif refresh_type == "signals":
            await self._show_signals_menu_callback(query)
        elif refresh_type == "stats":
            await self._show_stats_menu_callback(query)
        elif refresh_type == "matches":
            await self._show_live_matches_callback(query)
        elif refresh_type == "pnl":
            await self._show_pnl_report(query)
        elif refresh_type == "strategies":
            await self._show_strategies(query)

    async def send_signal_notification(self, signal_data: Dict[str, Any], match_data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–∏–≥–Ω–∞–ª–µ"""
        try:
            confidence_emoji = "üî•" if signal_data.get('confidence', 0) > 0.8 else "‚ö°"
            
            text = f"""
üéØ <b>–ù–û–í–´–ô –°–ò–ì–ù–ê–õ!</b>

{confidence_emoji} <b>{signal_data.get('strategy_name', 'Unknown')}</b>
‚öΩ <b>{match_data.get('home_team', 'Unknown')} vs {match_data.get('away_team', 'Unknown')}</b>

üéØ –¢–∏–ø: {signal_data.get('signal_type', 'Unknown')}
üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal_data.get('confidence', 0):.1%}
üí∞ –†–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏: {signal_data.get('bet_size', 0):.2f}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}

üìà –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:
‚Ä¢ dxG: {signal_data.get('details', {}).get('dxg_home', 0):.2f} - {signal_data.get('details', {}).get('dxg_away', 0):.2f}
‚Ä¢ Momentum: {signal_data.get('details', {}).get('momentum', 0):.2f}
            """
            
            keyboard = [
                [InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="signals_active")],
                [InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="main_menu")]
            ]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            for user_id in self.authorized_users:
                try:
                    await self.application.bot.send_message(
                        chat_id=user_id,
                        text=text,
                        parse_mode=ParseMode.HTML,
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–µ: {str(e)}")

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        try:
            await self.application.initialize()
            await self.application.start()
            
            self.logger.success("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            self.logger.info("–ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            await self.application.updater.start_polling()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}")
            raise

    async def stop_polling(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()
            self.logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {str(e)}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
async def create_telegram_bot(config: Config) -> BetBogTelegramBot:
    """–°–æ–∑–¥–∞—Ç—å –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram –±–æ—Ç–∞"""
    bot = BetBogTelegramBot(config)
    await bot.initialize()
    return bot


if __name__ == "__main__":
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    async def main():
        config = Config()
        bot = await create_telegram_bot(config)
        await bot.start_polling()
        
        try:
            # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã–º
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            await bot.stop_polling()

    asyncio.run(main())