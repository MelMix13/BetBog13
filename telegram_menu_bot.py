#!/usr/bin/env python3
"""
Telegram –±–æ—Ç —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –∫–Ω–æ–ø–æ—á–Ω—ã–º –º–µ–Ω—é –¥–ª—è BetBog
"""
import asyncio
import aiohttp
import os
import json
from typing import Dict, Any, List
from datetime import datetime, date
import asyncpg

class TelegramMenuBot:
    """Telegram –±–æ—Ç —Å –∫–Ω–æ–ø–æ—á–Ω—ã–º –º–µ–Ω—é"""
    
    def __init__(self):
        self.bot_token = os.getenv("BOT_TOKEN", "7228733029:AAFVPzKHUSRidigzYSy_IANt8rWzjjPBDPA")
        self.database_url = os.getenv("DATABASE_URL")
        self.running = False
        self.user_messages = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ message_id –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.animation_frames = self._init_animation_frames()
        
    def _init_animation_frames(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–¥—Ä–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤"""
        return {
            "loading": [
                "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞",
                "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞.",
                "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞..",
                "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞..."
            ],
            "processing": [
                "üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞",
                "üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞.",
                "üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞..",
                "üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞..."
            ],
            "analyzing": [
                "üìä –ê–Ω–∞–ª–∏–∑",
                "üìä –ê–Ω–∞–ª–∏–∑.",
                "üìä –ê–Ω–∞–ª–∏–∑..",
                "üìä –ê–Ω–∞–ª–∏–∑..."
            ],
            "connecting": [
                "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.",
                "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ..",
                "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ..."
            ]
        }
    
    async def animate_transition(self, chat_id: int, animation_type: str = "loading", duration: float = 1.0):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ—Ö–æ–¥–∞"""
        frames = self.animation_frames.get(animation_type, self.animation_frames["loading"])
        frame_duration = duration / len(frames)
        
        # –ü–æ–ª—É—á–∞–µ–º message_id –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        message_id = self.user_messages.get(chat_id)
        if not message_id:
            return
        
        for frame in frames:
            await self.edit_message(chat_id, message_id, frame)
            await asyncio.sleep(frame_duration)
    
    async def smooth_transition_to(self, chat_id: int, callback_query_id: str, 
                                 target_content: str, target_markup=None, 
                                 animation_type: str = "loading"):
        """–ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–æ–≤–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        await self.answer_callback_query(callback_query_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
        await self.animate_transition(chat_id, animation_type, 0.8)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        message_id = self.user_messages.get(chat_id)
        if message_id:
            await self.edit_message(chat_id, message_id, target_content, target_markup)
            
    async def get_db_connection(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            return await asyncpg.connect(self.database_url)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return None

    async def send_message(self, chat_id: int, text: str, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            data = {
                "chat_id": chat_id, 
                "text": text, 
                "parse_mode": "HTML"
            }
            
            if reply_markup:
                data["reply_markup"] = json.dumps(reply_markup)
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        result = await response.json()
                        message_id = result.get("result", {}).get("message_id")
                        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                        return message_id
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status}")
                        return None
                        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return None

    async def edit_message(self, chat_id: int, message_id: int, text: str, reply_markup=None):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/editMessageText"
            data = {
                "chat_id": chat_id,
                "message_id": message_id,
                "text": text, 
                "parse_mode": "HTML"
            }
            
            if reply_markup:
                data["reply_markup"] = json.dumps(reply_markup)
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {response.status}")
                        return False
                        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return False

    async def answer_callback_query(self, callback_query_id: str, text: str = ""):
        """–û—Ç–≤–µ—Ç –Ω–∞ callback query"""
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/answerCallbackQuery"
            data = {"callback_query_id": callback_query_id, "text": text}
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    return response.status == 200
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")
            return False

    def create_main_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        return {
            "inline_keyboard": [
                [
                    {"text": "üìä Live –º–∞—Ç—á–∏", "callback_data": "live_matches"},
                    {"text": "‚ö° –°–∏–≥–Ω–∞–ª—ã", "callback_data": "signals"}
                ],
                [
                    {"text": "üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏", "callback_data": "strategies"},
                    {"text": "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "statistics"}
                ],
                [
                    {"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "callback_data": "settings"},
                    {"text": "‚ùì –ü–æ–º–æ—â—å", "callback_data": "help"}
                ],
                [
                    {"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback_data": "refresh"}
                ]
            ]
        }

    async def get_live_matches_count(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ live –º–∞—Ç—á–µ–π —á–µ—Ä–µ–∑ API"""
        try:
            api_token = os.getenv("API_TOKEN", "219769-EKswpZvLvKyoxD")
            url = "https://api.b365api.com/v3/events/inplay"
            params = {
                "sport_id": 1,  # Football
                "token": api_token
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params, timeout=aiohttp.ClientTimeout(total=10)) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get("success") == 1:
                            matches = data.get("results", [])
                            return len(matches)
                        else:
                            print(f"API –æ—à–∏–±–∫–∞: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                            return "API –æ—à–∏–±–∫–∞"
                    else:
                        print(f"HTTP –æ—à–∏–±–∫–∞: {response.status}")
                        return "HTTP –æ—à–∏–±–∫–∞"
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è live –º–∞—Ç—á–µ–π —á–µ—Ä–µ–∑ API: {e}")
            return "–û—à–∏–±–∫–∞"

    async def get_recent_signals(self, limit: int = 10):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        conn = await self.get_db_connection()
        if not conn:
            return []
        
        try:
            query = """
                SELECT strategy_name, signal_type, confidence, result, created_at
                FROM signals 
                ORDER BY created_at DESC 
                LIMIT $1
            """
            rows = await conn.fetch(query, limit)
            return [dict(row) for row in rows]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return []
        finally:
            await conn.close()

    async def get_strategy_configs(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        conn = await self.get_db_connection()
        if not conn:
            return []
        
        try:
            query = """
                SELECT strategy_name, total_signals, win_rate, winning_signals, enabled
                FROM strategy_configs 
                WHERE enabled = true
                ORDER BY strategy_name
            """
            rows = await conn.fetch(query)
            strategies = []
            for row in rows:
                strategy = dict(row)
                # –í—ã—á–∏—Å–ª—è–µ–º win_rate –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
                if strategy['total_signals'] > 0 and strategy['win_rate'] == 0:
                    strategy['win_rate'] = (strategy['winning_signals'] / strategy['total_signals']) * 100
                strategies.append(strategy)
            return strategies
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
            return []
        finally:
            await conn.close()

    def format_strategy_name(self, strategy_name: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        strategy_names = {
            "over_2_5_goals": "‚öΩ –¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ 2.5",
            "under_2_5_goals": "üõ°Ô∏è –¢–æ—Ç–∞–ª –º–µ–Ω—å—à–µ 2.5", 
            "btts_yes": "ü•Ö –û–±–µ –∑–∞–±—å—é—Ç –î–ê",
            "btts_no": "üö´ –û–±–µ –∑–∞–±—å—é—Ç –ù–ï–¢",
            "home_win": "üè† –ü–æ–±–µ–¥–∞ —Ö–æ–∑—è–µ–≤",
            "away_win": "‚úàÔ∏è –ü–æ–±–µ–¥–∞ –≥–æ—Å—Ç–µ–π",
            "draw": "ü§ù –ù–∏—á—å—è",
            "next_goal_home": "üéØ –°–ª–µ–¥. –≥–æ–ª - —Ö–æ–∑—è–µ–≤–∞",
            "next_goal_away": "üéØ –°–ª–µ–¥. –≥–æ–ª - –≥–æ—Å—Ç–∏"
        }
        return strategy_names.get(strategy_name, f"üìã {strategy_name}")

    async def get_system_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        conn = await self.get_db_connection()
        if not conn:
            return {}
        
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = date.today()
            
            queries = {
                "total_signals": "SELECT COUNT(*) FROM signals",
                "today_signals": "SELECT COUNT(*) FROM signals WHERE DATE(created_at) = $1",
                "pending_signals": "SELECT COUNT(*) FROM signals WHERE result = 'pending'",
                "win_signals": "SELECT COUNT(*) FROM signals WHERE result = 'win'",
                "total_matches": "SELECT COUNT(*) FROM matches"
            }
            
            stats = {}
            for key, query in queries.items():
                if key == "today_signals":
                    stats[key] = await conn.fetchval(query, today)
                else:
                    stats[key] = await conn.fetchval(query)
                    
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π win rate
            if stats["total_signals"] > 0:
                stats["win_rate"] = (stats["win_signals"] / stats["total_signals"]) * 100
            else:
                stats["win_rate"] = 0
                
            return stats
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
        finally:
            await conn.close()

    async def handle_live_matches(self, chat_id: int, callback_query_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ Live –º–∞—Ç—á–∏"""
        await self.answer_callback_query(callback_query_id, "–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –æ live –º–∞—Ç—á–∞—Ö...")
        
        live_count = await self.get_live_matches_count()
        
        message = f"""üìä <b>Live –º–∞—Ç—á–∏</b>

üî¥ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç—á–∏:</b> {live_count}
‚ö° –ê–Ω–∞–ª–∏–∑ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
üìà –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–µ—Ç—Ä–∏–∫

<b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –º–µ—Ç—Ä–∏–∫–∏:</b>
‚Ä¢ dxG (–ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –≥–æ–ª—ã)
‚Ä¢ Gradient (—Ç—Ä–µ–Ω–¥—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
‚Ä¢ Momentum (–∏–º–ø—É–ª—å—Å –∫–æ–º–∞–Ω–¥)
‚Ä¢ Wave amplitude (–∞–º–ø–ª–∏—Ç—É–¥–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏)
‚Ä¢ Tiredness factor (—Ñ–∞–∫—Ç–æ—Ä —É—Å—Ç–∞–ª–æ—Å—Ç–∏)
‚Ä¢ Stability (—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å)

üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥"""

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å message_id
        if chat_id in self.user_messages:
            await self.edit_message(chat_id, self.user_messages[chat_id], message, self.create_main_menu())
        else:
            message_id = await self.send_message(chat_id, message, self.create_main_menu())
            if message_id:
                self.user_messages[chat_id] = message_id

    async def handle_signals(self, chat_id: int, callback_query_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –°–∏–≥–Ω–∞–ª—ã"""
        await self.answer_callback_query(callback_query_id, "–ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã...")
        
        signals = await self.get_recent_signals(10)
        
        if not signals:
            message = """‚ö° <b>–°–∏–≥–Ω–∞–ª—ã</b>

üîç <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>

–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç live –º–∞—Ç—á–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–µ—Ç—Ä–∏–∫."""
        else:
            message = "‚ö° <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–≥–Ω–∞–ª–æ–≤</b>\n\n"
            
            for i, signal in enumerate(signals, 1):
                status_emoji = "üü°" if signal['result'] == 'pending' else ("üü¢" if signal['result'] == 'win' else "üî¥")
                confidence_pct = signal['confidence'] * 100 if signal['confidence'] else 0
                created_time = signal['created_at'].strftime("%d.%m %H:%M") if signal['created_at'] else "–ù/–î"
                
                message += f"{i}. {status_emoji} <b>{signal['strategy_name']}</b>\n"
                message += f"   üìä {signal['signal_type']} ({confidence_pct:.1f}%)\n"
                message += f"   üìÖ {created_time}\n\n"

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å message_id
        if chat_id in self.user_messages:
            await self.edit_message(chat_id, self.user_messages[chat_id], message, self.create_main_menu())
        else:
            message_id = await self.send_message(chat_id, message, self.create_main_menu())
            if message_id:
                self.user_messages[chat_id] = message_id

    async def handle_strategies(self, chat_id: int, callback_query_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        await self.answer_callback_query(callback_query_id, "–ó–∞–≥—Ä—É–∂–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
        
        strategies = await self.get_strategy_configs()
        print(f"DEBUG: Loaded {len(strategies)} strategies from database")
        
        if not strategies:
            message = """üéØ <b>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏</b>

‚öôÔ∏è <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>

–°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        else:
            message = "üéØ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏</b>\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ –ª–æ–≥–∏–∫–µ
            strategy_groups = {
                "results": ["home_win", "draw", "away_win"],
                "totals": ["over_2_5_goals", "under_2_5_goals"],
                "btts": ["btts_yes", "btts_no"],
                "next_goal": ["next_goal_home", "next_goal_away"]
            }
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            strategies_dict = {s['strategy_name']: s for s in strategies}
            print(f"DEBUG: Strategy names in dict: {list(strategies_dict.keys())}")
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ –≥—Ä—É–ø–ø–∞–º
            message += "üèÜ <b>–ò—Å—Ö–æ–¥—ã –º–∞—Ç—á–∞:</b>\n"
            for strategy_name in strategy_groups["results"]:
                if strategy_name in strategies_dict:
                    strategy = strategies_dict[strategy_name]
                    display_name = self.format_strategy_name(strategy_name)
                    win_rate = strategy.get('win_rate', 0)
                    total_signals = strategy.get('total_signals', 0)
                    message += f"üü¢ {display_name} | üéØ {win_rate:.1f}% | üìä {total_signals}\n"
            
            message += "\n‚öΩ <b>–¢–æ—Ç–∞–ª—ã –≥–æ–ª–æ–≤:</b>\n"
            for strategy_name in strategy_groups["totals"]:
                if strategy_name in strategies_dict:
                    strategy = strategies_dict[strategy_name]
                    display_name = self.format_strategy_name(strategy_name)
                    win_rate = strategy.get('win_rate', 0)
                    total_signals = strategy.get('total_signals', 0)
                    message += f"üü¢ {display_name} | üéØ {win_rate:.1f}% | üìä {total_signals}\n"
            
            message += "\nü•Ö <b>–û–±–µ –∑–∞–±—å—é—Ç:</b>\n"
            for strategy_name in strategy_groups["btts"]:
                if strategy_name in strategies_dict:
                    strategy = strategies_dict[strategy_name]
                    display_name = self.format_strategy_name(strategy_name)
                    win_rate = strategy.get('win_rate', 0)
                    total_signals = strategy.get('total_signals', 0)
                    message += f"üü¢ {display_name} | üéØ {win_rate:.1f}% | üìä {total_signals}\n"
            
            message += "\nüéØ <b>–°–ª–µ–¥—É—é—â–∏–π –≥–æ–ª:</b>\n"
            for strategy_name in strategy_groups["next_goal"]:
                if strategy_name in strategies_dict:
                    strategy = strategies_dict[strategy_name]
                    display_name = self.format_strategy_name(strategy_name)
                    win_rate = strategy.get('win_rate', 0)
                    total_signals = strategy.get('total_signals', 0)
                    message += f"üü¢ {display_name} | üéØ {win_rate:.1f}% | üìä {total_signals}\n"
            
            print(f"DEBUG: Final message length: {len(message)}")

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å message_id
        if chat_id in self.user_messages:
            await self.edit_message(chat_id, self.user_messages[chat_id], message, self.create_main_menu())
        else:
            message_id = await self.send_message(chat_id, message, self.create_main_menu())
            if message_id:
                self.user_messages[chat_id] = message_id

    async def handle_statistics(self, chat_id: int, callback_query_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        await self.answer_callback_query(callback_query_id, "–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        stats = await self.get_system_statistics()
        
        if not stats:
            message = """üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

‚ùå <b>–î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</b>

–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö."""
        else:
            message = f"""üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>

üìä <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {stats.get('total_signals', 0)}
‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.get('today_signals', 0)}
‚Ä¢ –û–∂–∏–¥–∞—é—â–∏—Ö: {stats.get('pending_signals', 0)}
‚Ä¢ –í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö: {stats.get('win_signals', 0)}

üéØ <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ Win Rate: {stats.get('win_rate', 0):.1f}%

‚öΩ <b>–ú–∞—Ç—á–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats.get('total_matches', 0)}

üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""

        await self.send_message(chat_id, message, self.create_main_menu())

    async def handle_settings(self, chat_id: int, callback_query_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
        await self.answer_callback_query(callback_query_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–∫–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        from config import Config
        config = Config()
        
        message = f"""‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b>

üìä <b>–ê–Ω–∞–ª–∏–∑ —Ç–∏–∫–æ–≤:</b>
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ç–∏–∫–æ–≤: {getattr(config, 'TICK_INTERVAL', 60)} —Å–µ–∫
‚Ä¢ –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞: {getattr(config, 'TICK_WINDOW_SIZE', 3)} —Ç–∏–∫–æ–≤
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è: {getattr(config, 'MAX_TICKS_HISTORY', 50)} —Ç–∏–∫–æ–≤

üîß <b>–°–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: 60 —Å–µ–∫
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –º–∞—Ç—á–µ–π: 20 –∑–∞ —Ü–∏–∫–ª
‚Ä¢ ML –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
‚Ä¢ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: –≤–∫–ª—é—á–µ–Ω–∞

üìä <b>–ü–æ—Ä–æ–≥–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b>
‚Ä¢ Confidence: 70%"""

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ç–∏–∫–æ–≤
        settings_menu = {
            "inline_keyboard": [
                [
                    {"text": "‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ç–∏–∫–æ–≤", "callback_data": "set_tick_interval"},
                    {"text": "üìä –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞", "callback_data": "set_tick_window"}
                ],
                [
                    {"text": "üìù –ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–æ–≤", "callback_data": "set_tick_history"},
                    {"text": "üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –º–µ—Ç—Ä–∏–∫–∏", "callback_data": "set_tick_metrics"}
                ],
                [
                    {"text": "üîÑ –ü–æ—Ä–æ–≥–∏ —Ç—Ä–µ–Ω–¥–æ–≤", "callback_data": "set_tick_thresholds"},
                    {"text": "üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞", "callback_data": "set_tick_confidence"}
                ],
                [
                    {"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}
                ]
            ]
        }

        await self.send_message(chat_id, message, settings_menu)

    async def handle_main_menu(self, chat_id: int, callback_query_id: str):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await self.answer_callback_query(callback_query_id)
        
        message = """üèÜ <b>BetBog Monitoring Bot</b>

ü§ñ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
üìä –ê–Ω–∞–ª–∏–∑ live –º–∞—Ç—á–µ–π —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"""
        
        await self.send_message(chat_id, message, self.create_main_menu())

    async def handle_tick_interval_settings(self, chat_id: int, callback_query_id: str):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Ç–∏–∫–æ–≤"""
        await self.answer_callback_query(callback_query_id)
        
        from config import Config
        config = Config()
        current_interval = getattr(config, 'TICK_INTERVAL', 60)
        
        message = f"""‚è±Ô∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Ç–∏–∫–æ–≤</b>

<b>–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:</b> {current_interval} —Å–µ–∫—É–Ω–¥

<b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç:</b>
‚Ä¢ –ö–∞–∫ —á–∞—Å—Ç–æ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ
‚Ä¢ –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º
‚Ä¢ –ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ API

<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ 30 —Å–µ–∫ - –≤—ã—Å–æ–∫–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –±–æ–ª—å—à–µ —à—É–º–∞
‚Ä¢ 60 —Å–µ–∫ - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
‚Ä¢ 90-120 —Å–µ–∫ - —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã, –º–µ–Ω—å—à–µ –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""

        interval_menu = {
            "inline_keyboard": [
                [
                    {"text": "‚ö° 30 —Å–µ–∫", "callback_data": "tick_interval_30"},
                    {"text": "‚öñÔ∏è 60 —Å–µ–∫", "callback_data": "tick_interval_60"},
                    {"text": "üõ°Ô∏è 90 —Å–µ–∫", "callback_data": "tick_interval_90"}
                ],
                [
                    {"text": "üîí 120 —Å–µ–∫", "callback_data": "tick_interval_120"},
                    {"text": "üêå 180 —Å–µ–∫", "callback_data": "tick_interval_180"}
                ],
                [
                    {"text": "‚öôÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", "callback_data": "settings"}
                ]
            ]
        }

        await self.send_message(chat_id, message, interval_menu)

    async def handle_tick_window_settings(self, chat_id: int, callback_query_id: str):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ —Ç–∏–∫–æ–≤"""
        await self.answer_callback_query(callback_query_id)
        
        from config import Config
        config = Config()
        current_window = getattr(config, 'TICK_WINDOW_SIZE', 3)
        
        message = f"""üìä <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞</b>

<b>–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä:</b> {current_window} —Ç–∏–∫–æ–≤

<b>–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç:</b>
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–ª—å—Ç –¥–ª—è —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
‚Ä¢ –ü–ª–∞–≤–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤
‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ 2 —Ç–∏–∫–∞ - –±—ã—Å—Ç—Ä–∞—è —Ä–µ–∞–∫—Ü–∏—è, –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ
‚Ä¢ 3 —Ç–∏–∫–∞ - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ 5 —Ç–∏–∫–æ–≤ - –ø–ª–∞–≤–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã, –º–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è"""

        window_menu = {
            "inline_keyboard": [
                [
                    {"text": "‚ö° 2 —Ç–∏–∫–∞", "callback_data": "tick_window_2"},
                    {"text": "‚öñÔ∏è 3 —Ç–∏–∫–∞", "callback_data": "tick_window_3"},
                    {"text": "üõ°Ô∏è 4 —Ç–∏–∫–∞", "callback_data": "tick_window_4"}
                ],
                [
                    {"text": "üîí 5 —Ç–∏–∫–æ–≤", "callback_data": "tick_window_5"},
                    {"text": "üìà 7 —Ç–∏–∫–æ–≤", "callback_data": "tick_window_7"}
                ],
                [
                    {"text": "‚öôÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", "callback_data": "settings"}
                ]
            ]
        }

        await self.send_message(chat_id, message, window_menu)

    async def handle_tick_history_settings(self, chat_id: int, callback_query_id: str):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∏–∫–æ–≤"""
        await self.answer_callback_query(callback_query_id)
        
        from config import Config
        config = Config()
        current_history = getattr(config, 'MAX_TICKS_HISTORY', 50)
        
        message = f"""üìù <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∏–∫–æ–≤</b>

<b>–¢–µ–∫—É—â–∞—è –∏—Å—Ç–æ—Ä–∏—è:</b> {current_history} —Ç–∏–∫–æ–≤

<b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç:</b>
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–æ–≤ –Ω–∞ –º–∞—Ç—á
‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
‚Ä¢ –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏

<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ 30 —Ç–∏–∫–æ–≤ - –∫–æ—Ä–æ—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ (30-60 –º–∏–Ω—É—Ç)
‚Ä¢ 50 —Ç–∏–∫–æ–≤ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (–ø–æ–ª–Ω—ã–π –º–∞—Ç—á)
‚Ä¢ 100 —Ç–∏–∫–æ–≤ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""

        history_menu = {
            "inline_keyboard": [
                [
                    {"text": "‚ö° 30 —Ç–∏–∫–æ–≤", "callback_data": "tick_history_30"},
                    {"text": "‚öñÔ∏è 50 —Ç–∏–∫–æ–≤", "callback_data": "tick_history_50"},
                    {"text": "üìà 75 —Ç–∏–∫–æ–≤", "callback_data": "tick_history_75"}
                ],
                [
                    {"text": "üîí 100 —Ç–∏–∫–æ–≤", "callback_data": "tick_history_100"},
                    {"text": "üíæ 150 —Ç–∏–∫–æ–≤", "callback_data": "tick_history_150"}
                ],
                [
                    {"text": "‚öôÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", "callback_data": "settings"}
                ]
            ]
        }

        await self.send_message(chat_id, message, history_menu)

    async def handle_tick_metrics_settings(self, chat_id: int, callback_query_id: str):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        await self.answer_callback_query(callback_query_id)
        
        message = """üéØ <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –º–µ—Ç—Ä–∏–∫–∏</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω—ã):</b>
‚úÖ –û–±—â–∏–µ –∞—Ç–∞–∫–∏ (total_attacks)
‚úÖ –û–±—â–∏–µ —É–¥–∞—Ä—ã (total_shots)
‚úÖ –û–ø–∞—Å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã (total_dangerous)
‚úÖ –£–≥–ª–æ–≤—ã–µ (total_corners)
‚úÖ –ì–æ–ª—ã (total_goals)

<b>–†–∞–∑–¥–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:</b>
‚úÖ –ê—Ç–∞–∫–∏ —Ö–æ–∑—è–µ–≤/–≥–æ—Å—Ç–µ–π
‚úÖ –£–¥–∞—Ä—ã —Ö–æ–∑—è–µ–≤/–≥–æ—Å—Ç–µ–π
‚úÖ –û–ø–∞—Å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–ø–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è):</b>
‚è≥ –í–ª–∞–¥–µ–Ω–∏–µ –º—è—á–æ–º
‚è≥ –ù–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª
‚è≥ –¢–æ—á–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á"""

        metrics_menu = {
            "inline_keyboard": [
                [
                    {"text": "‚úÖ –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã", "callback_data": "tick_metrics_all"}
                ],
                [
                    {"text": "‚öôÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", "callback_data": "settings"}
                ]
            ]
        }

        await self.send_message(chat_id, message, metrics_menu)

    async def handle_tick_thresholds_settings(self, chat_id: int, callback_query_id: str):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤"""
        await self.answer_callback_query(callback_query_id)
        
        message = """üîÑ <b>–ü–æ—Ä–æ–≥–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤</b>

<b>–¢–µ–∫—É—â–∏–µ –ø–æ—Ä–æ–≥–∏:</b>
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: 1.0
‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞: 0.7
‚Ä¢ –ü–æ—Ä–æ–≥ —Å–º–µ–Ω—ã —Ç—Ä–µ–Ω–¥–∞: 0.5

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–æ–≤:</b>
‚Ä¢ <b>–ù–∏–∑–∫–∏–µ –ø–æ—Ä–æ–≥–∏</b> - –±–æ–ª—å—à–µ —Å–∏–≥–Ω–∞–ª–æ–≤, –±–æ–ª—å—à–µ —à—É–º–∞
‚Ä¢ <b>–í—ã—Å–æ–∫–∏–µ –ø–æ—Ä–æ–≥–∏</b> - –º–µ–Ω—å—à–µ —Å–∏–≥–Ω–∞–ª–æ–≤, –≤—ã—à–µ —Ç–æ—á–Ω–æ—Å—Ç—å

<b>–¢–∏–ø—ã —Ç—Ä–µ–Ω–¥–æ–≤:</b>
üìà Rising - –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–∏–π
üìâ Falling - —É–±—ã–≤–∞—é—â–∏–π
‚û°Ô∏è Stable - —Å—Ç–∞–±–∏–ª—å–Ω—ã–π"""

        thresholds_menu = {
            "inline_keyboard": [
                [
                    {"text": "üîì –ù–∏–∑–∫–∏–µ –ø–æ—Ä–æ–≥–∏", "callback_data": "tick_thresholds_low"},
                    {"text": "‚öñÔ∏è –°—Ä–µ–¥–Ω–∏–µ –ø–æ—Ä–æ–≥–∏", "callback_data": "tick_thresholds_medium"}
                ],
                [
                    {"text": "üîí –í—ã—Å–æ–∫–∏–µ –ø–æ—Ä–æ–≥–∏", "callback_data": "tick_thresholds_high"}
                ],
                [
                    {"text": "‚öôÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", "callback_data": "settings"}
                ]
            ]
        }

        await self.send_message(chat_id, message, thresholds_menu)

    async def handle_tick_confidence_settings(self, chat_id: int, callback_query_id: str):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        await self.answer_callback_query(callback_query_id)
        
        message = """üìà <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–∫–æ–≤</b>

<b>–¢–µ–∫—É—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> 70%

<b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤–ª–∏—è–µ—Ç –Ω–∞:</b>
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ª–æ–∂–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤

<b>–£—Ä–æ–≤–Ω–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ 50% - –º–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤, –Ω–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
‚Ä¢ 70% - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
‚Ä¢ 85% - –º–∞–ª–æ —Å–∏–≥–Ω–∞–ª–æ–≤, –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å"""

        confidence_menu = {
            "inline_keyboard": [
                [
                    {"text": "üîì 50%", "callback_data": "tick_confidence_50"},
                    {"text": "‚öñÔ∏è 60%", "callback_data": "tick_confidence_60"},
                    {"text": "üéØ 70%", "callback_data": "tick_confidence_70"}
                ],
                [
                    {"text": "üîí 80%", "callback_data": "tick_confidence_80"},
                    {"text": "üíé 85%", "callback_data": "tick_confidence_85"}
                ],
                [
                    {"text": "‚öôÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", "callback_data": "settings"}
                ]
            ]
        }

        await self.send_message(chat_id, message, confidence_menu)

    async def handle_tick_interval_change(self, chat_id: int, callback_query_id: str, callback_data: str):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Ç–∏–∫–æ–≤"""
        await self.answer_callback_query(callback_query_id, "–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω!")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ callback_data
        interval = int(callback_data.split("_")[-1])
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        
        message = f"""‚úÖ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª —Ç–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω</b>

<b>–ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:</b> {interval} —Å–µ–∫—É–Ω–¥

–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞."""

        back_menu = {
            "inline_keyboard": [
                [
                    {"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "callback_data": "settings"},
                    {"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}
                ]
            ]
        }

        await self.send_message(chat_id, message, back_menu)

    async def handle_tick_window_change(self, chat_id: int, callback_query_id: str, callback_data: str):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ —Ç–∏–∫–æ–≤"""
        await self.answer_callback_query(callback_query_id, "–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        
        window_size = int(callback_data.split("_")[-1])
        
        message = f"""‚úÖ <b>–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω</b>

<b>–ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä:</b> {window_size} —Ç–∏–∫–æ–≤

–¢–µ–ø–µ—Ä—å —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º {window_size} –¥–µ–ª—å—Ç–∞–º."""

        back_menu = {
            "inline_keyboard": [
                [
                    {"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "callback_data": "settings"},
                    {"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}
                ]
            ]
        }

        await self.send_message(chat_id, message, back_menu)

    async def handle_tick_history_change(self, chat_id: int, callback_query_id: str, callback_data: str):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∏–∫–æ–≤"""
        await self.answer_callback_query(callback_query_id, "–ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        
        history_size = int(callback_data.split("_")[-1])
        
        message = f"""‚úÖ <b>–ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞</b>

<b>–ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏:</b> {history_size} —Ç–∏–∫–æ–≤

–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –¥–æ {history_size} —Ç–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞."""

        back_menu = {
            "inline_keyboard": [
                [
                    {"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "callback_data": "settings"},
                    {"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}
                ]
            ]
        }

        await self.send_message(chat_id, message, back_menu)

    async def handle_help(self, chat_id: int, callback_query_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å"""
        await self.answer_callback_query(callback_query_id)
        
        message = """‚ùì <b>–ü–æ–º–æ—â—å –ø–æ BetBog Bot</b>

ü§ñ <b>–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç live —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏
‚Ä¢ –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Å—Ç–∞–≤–æ–∫
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

üìä <b>–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é:</b>
‚Ä¢ Live –º–∞—Ç—á–∏ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π
‚Ä¢ –°–∏–≥–Ω–∞–ª—ã - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–≥–Ω–∞–ª–æ–≤
‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã

üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:</b>
–ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö

‚ö° –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –±–µ–∑ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π"""

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å message_id
        if chat_id in self.user_messages:
            await self.edit_message(chat_id, self.user_messages[chat_id], message, self.create_main_menu())
        else:
            message_id = await self.send_message(chat_id, message, self.create_main_menu())
            if message_id:
                self.user_messages[chat_id] = message_id

    async def handle_refresh(self, chat_id: int, callback_query_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –û–±–Ω–æ–≤–∏—Ç—å"""
        await self.answer_callback_query(callback_query_id, "–û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        live_count = await self.get_live_matches_count()
        stats = await self.get_system_statistics()
        
        message = f"""üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>

üìä <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b>
‚Ä¢ Live –º–∞—Ç—á–∏: {live_count}
‚Ä¢ –°–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.get('today_signals', 0)}
‚Ä¢ –û–∂–∏–¥–∞—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {stats.get('pending_signals', 0)}
‚Ä¢ Win Rate: {stats.get('win_rate', 0):.1f}%

üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"""

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å message_id
        if chat_id in self.user_messages:
            await self.edit_message(chat_id, self.user_messages[chat_id], message, self.create_main_menu())
        else:
            message_id = await self.send_message(chat_id, message, self.create_main_menu())
            if message_id:
                self.user_messages[chat_id] = message_id

    async def handle_command(self, chat_id: int, text: str, user_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"üì® –ö–æ–º–∞–Ω–¥–∞ –æ—Ç {user_name}: {text}")
        
        if text.startswith("/start") or text.startswith("/menu"):
            message = """üèÜ <b>BetBog Monitoring Bot</b>

ü§ñ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
üìä –ê–Ω–∞–ª–∏–∑ live –º–∞—Ç—á–µ–π —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"""
            
            message_id = await self.send_message(chat_id, message, self.create_main_menu())
            if message_id:
                self.user_messages[chat_id] = message_id
            
        else:
            message = f"""–ö–æ–º–∞–Ω–¥–∞: <code>{text}</code>

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å message_id
            if chat_id in self.user_messages:
                await self.edit_message(chat_id, self.user_messages[chat_id], message, self.create_main_menu())
            else:
                message_id = await self.send_message(chat_id, message, self.create_main_menu())
                if message_id:
                    self.user_messages[chat_id] = message_id

    async def handle_callback(self, chat_id: int, callback_data: str, callback_query_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        print(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {callback_data}")
        
        if callback_data == "live_matches":
            await self.handle_live_matches_animated(chat_id, callback_query_id)
        elif callback_data == "signals":
            await self.handle_signals_animated(chat_id, callback_query_id)
        elif callback_data == "strategies":
            await self.handle_strategies(chat_id, callback_query_id)
        elif callback_data == "statistics":
            await self.handle_statistics_animated(chat_id, callback_query_id)
        elif callback_data == "settings":
            await self.handle_settings_animated(chat_id, callback_query_id)
        elif callback_data == "help":
            await self.handle_help_animated(chat_id, callback_query_id)
        elif callback_data == "refresh":
            await self.handle_refresh_animated(chat_id, callback_query_id)
        elif callback_data == "main_menu":
            await self.handle_main_menu(chat_id, callback_query_id)
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∏–∫–æ–≤
        elif callback_data == "set_tick_interval":
            await self.handle_tick_interval_settings(chat_id, callback_query_id)
        elif callback_data == "set_tick_window":
            await self.handle_tick_window_settings(chat_id, callback_query_id)
        elif callback_data == "set_tick_history":
            await self.handle_tick_history_settings(chat_id, callback_query_id)
        elif callback_data == "set_tick_metrics":
            await self.handle_tick_metrics_settings(chat_id, callback_query_id)
        elif callback_data == "set_tick_thresholds":
            await self.handle_tick_thresholds_settings(chat_id, callback_query_id)
        elif callback_data == "set_tick_confidence":
            await self.handle_tick_confidence_settings(chat_id, callback_query_id)
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —Ç–∏–∫–æ–≤
        elif callback_data.startswith("tick_interval_"):
            await self.handle_tick_interval_change(chat_id, callback_query_id, callback_data)
        elif callback_data.startswith("tick_window_"):
            await self.handle_tick_window_change(chat_id, callback_query_id, callback_data)
        elif callback_data.startswith("tick_history_"):
            await self.handle_tick_history_change(chat_id, callback_query_id, callback_data)
        else:
            await self.answer_callback_query(callback_query_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    async def handle_live_matches_animated(self, chat_id: int, callback_query_id: str):
        """–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ live –º–∞—Ç—á–∞–º"""
        live_count = await self.get_live_matches_count()
        
        message = f"""üìä <b>Live –º–∞—Ç—á–∏</b>

üî¥ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π:</b> {live_count}
‚ö° <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b> {"–í–∫–ª—é—á–µ–Ω" if live_count != "–û—à–∏–±–∫–∞" else "–û—à–∏–±–∫–∞"}

üéØ <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ –ê—Ç–∞–∫–∏ –∏ —É–¥–∞—Ä—ã –ø–æ –≤–æ—Ä–æ—Ç–∞–º
‚Ä¢ –û–ø–∞—Å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
‚Ä¢ –£–≥–ª–æ–≤—ã–µ —É–¥–∞—Ä—ã
‚Ä¢ –ì–æ–ª—ã –∏ —Å—á–µ—Ç

üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥"""
        
        await self.smooth_transition_to(chat_id, callback_query_id, message, 
                                      self.create_main_menu(), "connecting")

    async def handle_signals_animated(self, chat_id: int, callback_query_id: str):
        """–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–∏–≥–Ω–∞–ª–∞–º"""
        signals = await self.get_recent_signals(10)
        
        if not signals:
            message = """‚ö° <b>–°–∏–≥–Ω–∞–ª—ã</b>

üì≠ <b>–ù–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç</b>

–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç live –º–∞—Ç—á–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ:
‚Ä¢ –¢–∏–∫–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
‚Ä¢ –¢—Ä–µ–Ω–¥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥

üîÑ –û–±–Ω–æ–≤–ª—è–π—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        else:
            message = "‚ö° <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã</b>\n\n"
            for i, signal in enumerate(signals[:5], 1):
                strategy = self.format_strategy_name(signal['strategy_name'])
                confidence = signal['confidence']
                signal_type = signal['signal_type']
                result = signal.get('result', 'pending')
                
                result_emoji = "üü°" if result == "pending" else ("üü¢" if result == "win" else "üî¥")
                
                message += f"{i}. {strategy}\n"
                message += f"   üìä {signal_type} ({confidence:.0f}%) {result_emoji}\n\n"
            
            if len(signals) > 5:
                message += f"... –∏ –µ—â–µ {len(signals) - 5} —Å–∏–≥–Ω–∞–ª–æ–≤"
        
        await self.smooth_transition_to(chat_id, callback_query_id, message, 
                                      self.create_main_menu(), "analyzing")

    async def handle_strategies_animated(self, chat_id: int, callback_query_id: str):
        """–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º"""
        strategies = await self.get_strategy_configs()
        
        if not strategies:
            message = """üéØ <b>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏</b>

‚öôÔ∏è <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>

–°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        else:
            message = "üéØ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏</b>\n\n"
            
            for strategy in strategies[:6]:
                strategy_name = self.format_strategy_name(strategy['strategy_name'])
                total_signals = strategy.get('total_signals', 0)
                win_rate = strategy.get('win_rate', 0)
                
                message += f"{strategy_name}\n"
                message += f"üìä –°–∏–≥–Ω–∞–ª–æ–≤: {total_signals} | –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%\n\n"
        
        await self.smooth_transition_to(chat_id, callback_query_id, message, 
                                      self.create_main_menu(), "processing")

    async def handle_statistics_animated(self, chat_id: int, callback_query_id: str):
        """–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"""
        stats = await self.get_system_statistics()
        
        message = f"""üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>

üìä <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {stats.get('total_signals', 0)}
‚Ä¢ –°–µ–≥–æ–¥–Ω—è —Å–∏–≥–Ω–∞–ª–æ–≤: {stats.get('today_signals', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {stats.get('pending_signals', 0)}

üéØ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {stats.get('win_signals', 0)}
‚Ä¢ –û–±—â–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {stats.get('win_rate', 0):.1f}%

üîç <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–∞—Ç—á–µ–π: {stats.get('total_matches', 0)}"""

        await self.smooth_transition_to(chat_id, callback_query_id, message, 
                                      self.create_main_menu(), "analyzing")

    async def handle_settings_animated(self, chat_id: int, callback_query_id: str):
        """–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
        message = """‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b>

üîß <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ç–∏–∫–æ–≤:</b>

–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ live –º–∞—Ç—á–µ–π.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞  
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–æ–≤
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –º–µ—Ç—Ä–∏–∫–∏
‚Ä¢ –ü–æ—Ä–æ–≥–∏ –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤
‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞"""

        settings_menu = {
            "inline_keyboard": [
                [
                    {"text": "‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ç–∏–∫–æ–≤", "callback_data": "set_tick_interval"},
                    {"text": "üìä –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞", "callback_data": "set_tick_window"}
                ],
                [
                    {"text": "üìö –ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–æ–≤", "callback_data": "set_tick_history"},
                    {"text": "üéØ –ú–µ—Ç—Ä–∏–∫–∏", "callback_data": "set_tick_metrics"}
                ],
                [
                    {"text": "üîÑ –ü–æ—Ä–æ–≥–∏ —Ç—Ä–µ–Ω–¥–æ–≤", "callback_data": "set_tick_thresholds"},
                    {"text": "üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞", "callback_data": "set_tick_confidence"}
                ],
                [
                    {"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}
                ]
            ]
        }

        await self.smooth_transition_to(chat_id, callback_query_id, message, 
                                      settings_menu, "loading")

    async def handle_help_animated(self, chat_id: int, callback_query_id: str):
        """–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–º–æ—â–∏"""
        message = """‚ùì <b>–ü–æ–º–æ—â—å –ø–æ BetBog Bot</b>

ü§ñ <b>–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç live —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏
‚Ä¢ –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Å—Ç–∞–≤–æ–∫
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

üìä <b>–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é:</b>
‚Ä¢ Live –º–∞—Ç—á–∏ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π
‚Ä¢ –°–∏–≥–Ω–∞–ª—ã - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–≥–Ω–∞–ª–æ–≤
‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã

üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:</b>
–ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö

‚ö° –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –±–µ–∑ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π"""

        await self.smooth_transition_to(chat_id, callback_query_id, message, 
                                      self.create_main_menu(), "loading")

    async def handle_refresh_animated(self, chat_id: int, callback_query_id: str):
        """–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        message = """üèÜ <b>BetBog Monitoring Bot</b>

ü§ñ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
üìä –ê–Ω–∞–ª–∏–∑ live –º–∞—Ç—á–µ–π —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"""
        
        await self.smooth_transition_to(chat_id, callback_query_id, message, 
                                      self.create_main_menu(), "processing")

    async def handle_update(self, update: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
        try:
            if "message" in update:
                message = update["message"]
                chat_id = message["chat"]["id"]
                text = message.get("text", "")
                user = message.get("from", {})
                user_name = user.get("first_name", "Unknown")
                
                await self.handle_command(chat_id, text, user_name)
                
            elif "callback_query" in update:
                callback_query = update["callback_query"]
                chat_id = callback_query["message"]["chat"]["id"]
                callback_data = callback_query["data"]
                callback_query_id = callback_query["id"]
                
                await self.handle_callback(chat_id, callback_data, callback_query_id)
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")

    async def process_updates(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        last_update_id = 0
        
        while self.running:
            try:
                url = f"https://api.telegram.org/bot{self.bot_token}/getUpdates"
                params = {"offset": last_update_id + 1, "timeout": 30}
                
                async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=35)) as session:
                    async with session.get(url, params=params) as response:
                        if response.status == 200:
                            data = await response.json()
                            if data.get("ok"):
                                for update in data.get("result", []):
                                    await self.handle_update(update)
                                    last_update_id = max(last_update_id, update["update_id"])
                        else:
                            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {response.status}")
                        
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ polling: {str(e)}")
                await asyncio.sleep(5)

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.running = True
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/getUpdates"
            params = {"offset": -1}
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get("ok") and data.get("result"):
                            last_update_id = data["result"][-1]["update_id"]
                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                            async with session.get(url, params={"offset": last_update_id + 1}) as _:
                                pass
        except:
            pass
        
        print("üöÄ BetBog Menu Bot –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏")
        await self.process_updates()

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.running = False
        print("üõë Menu Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = TelegramMenuBot()
    try:
        await bot.start()
    except KeyboardInterrupt:
        bot.stop()
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

if __name__ == "__main__":
    asyncio.run(main())